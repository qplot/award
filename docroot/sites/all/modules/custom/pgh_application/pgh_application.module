<?php

/**
 * Implementation of hook_menu().
 */
function pgh_application_menu() {
  $items = array();

  $items['applications'] = array(
    'title' => 'All applications',
    'description' => 'List all applications',
    'page callback' => 'pgh_application_list_page',
    'page arguments' => array(),
    'access callback' => TRUE,
  );

  // Menu links for testing the Form API.
  $items['testform'] = array(
    'title' => 'Form example',
    'description' => 'Test form features',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pgh_application_testform'),
    'access callback' => TRUE,
  );
  $items['testfile'] = array(
    'title' => 'File example',
    'description' => 'Test file upload',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pgh_application_fileform'),
    'access callback' => TRUE,
  );
  $items['testmedia'] = array(
    'title' => 'Media example',
    'description' => 'Test media file upload',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pgh_application_mediaform'),
    'access callback' => TRUE,
  );
  $items['testajax'] = array(
    'title' => 'AJAX form',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pgh_application_ajaxform'),
    'access callback' => TRUE,
    'weight' => 0,
  );

  return $items;

}

/**
 * Implementation of hook_form_node_form_alter().
 *
 * Allows a user to specify a Business Unit nid in the query string when adding a new application node. This
 * value will be included in the node add form. This will then be used in hook_node_insert() to update the
 * Business Unit's field_applications with the newly created Application nid.
 *
 * @param array $form
 *   Nested array of form elements that comprise the form.
 *
 * @param array $form_state
 *   A keyed array containing the current state of the form.
 *
 * @param string $form_id
 *   String representing the name of the form itself.
 *
 * @author Jay Roberts <jay@designhammer.com>
 */
function pgh_application_form_node_form_alter(&$form, &$form_state, $form_id) {
  if ($form['type']['#value'] == 'application') {
    $bid = '';

    if (isset($_GET['bid'])) {
      $bid = $_GET['bid'];
    }
    elseif (isset($form_state['node'])) {
      $business_unit = pgh_api_business_unit_for_application($form_state['node']->nid);
      if ($business_unit) {
        $bid = $business_unit->nid;
      }
    }

    $form['business_unit'] = array(
      '#type' => 'hidden',
      '#value' => $bid,
    );

    // Redirect to dashboard after saving node.
    $form['actions']['submit']['#submit'][] = 'pgh_application_form_node_form_submit';

    // Don't validate on deletion.
    $form['actions']['delete']['#limit_validation_errors'] = array();
  }
}

/**
 * Ensure the Application has valid parent Business Unit which the user has permission to update.
 *
 * @param object $node
 *   The node being validated.
 *
 * @param array $form
 *   Nested array of form elements that comprise the form.
 *
 * @param array $form_state
 *   A keyed array containing the current state of the form.
 *
 * @author  Jay Roberts <jay@designhammer.com>
 */
function pgh_application_node_validate($node, $form, &$form_state) {
  // Don't do additional validation when deleting.
  if ($form_state['clicked_button']['#value'] == 'delete') {
    return;
  }

  if ($node->type !== 'application') {
    return;
  }

  if (!isset($node->business_unit)) {
    form_set_error('business_unit', 'Business unit is required');
    return;
  }

  if (!is_numeric($node->business_unit)) {
    form_set_error('business_unit', 'Invalid Business unit');
    return;
  }

  $business_unit = node_load($node->business_unit);

  if (!$business_unit) {
    form_set_error('business_unit', 'Invalid Business unit');
    return;
  }

  if (!entity_access('update', 'node', $business_unit)) {
    form_set_error('business_unit', 'You do not have permission to modify this Business Unit.');
    return;
  }
}

/**
 * Updates a Business Unit with an entity reference to a newly saved Application node.
 *
 * Pre-generates Response objects for each question in the Application's Application Type.
 *
 * @param object $node
 *   The inserted node.
 *
 * @author Jay Roberts <jay@designhammer.com>
 */
function pgh_application_node_insert($node) {
  if ($node->type != 'application') {
    return;
  }

  $business_unit = node_load($node->business_unit);

  if ($business_unit) {
    $business_unit_wrapper = entity_metadata_wrapper('node', $business_unit);
    $business_unit_wrapper->field_applications[] = intval($node->nid);
    $business_unit_wrapper->save();
  }

  // Create child response objects for each question in this application's type.
  $questions = pgh_api_questions_for_application($node->nid);
  foreach ($questions as $question) {
    pgh_api_set_response($node->nid, $question->nid, array(), TRUE);
  }
}

/**
 * Updates a Business Unit to remove an entity reference to a deleted Application node.
 *
 * @param object $node
 *   The inserted node.
 *
 * @author Jay Roberts <jay@designhammer.com>
 */
function pgh_application_node_delete($node) {
  if ($node->type != 'application') {
    return;
  }

  // Get parent Business Unit.
  $business_unit = pgh_api_business_unit_for_application($node->nid);

  if (!$business_unit) {
    return;
  }

  $business_unit_wrapper = entity_metadata_wrapper('node', $business_unit);

  // Remove the deleted Application from the parent Business Unit.
  for ($i = 0; $i < count($business_unit_wrapper->field_applications->value()); $i++) {
    if ($business_unit_wrapper->field_applications[$i]->value()->nid == $node->nid) {
      $business_unit_wrapper->field_applications[$i]->set(NULL);
      $business_unit_wrapper->save();
      break;
    }
  }
}

/**
 * Redirect to dashboard age after saving node.
 *
 * @param array $form
 *   Nested array of form elements that comprise the form.
 *
 * @param array $form_state
 *   A keyed array containing the current state of the form.
 *
 * @author Jay Roberts <jay@designhammer.com>
 */
function pgh_application_form_node_form_submit($form, &$form_state) {
  if (!empty($form_state['nid'])) {
    $form_state['redirect'] = 'dashboard';
  }
}


/**
 * Implementation of hook_block_info().
 */
function pgh_application_block_info() {
  $blocks = array();

  $blocks['application_category_menu'] = array(
    'info' => t('Application Category Menu'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implementation of hook_block_view().
 */
function pgh_application_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'application_category_menu':
      $block['subject'] = t('Application Category Menu');
      $application_nid = pgh_application_current_application_nid();
      $category_links = pgh_application_category_links($application_nid);

      if ($category_links) {
        $block['content'] = array(
          'list' => array(
            '#theme' => 'item_list',
            '#type' => 'ul',
            '#attributes' => array('class' => 'category-menu'),
            '#items' => $category_links,
          ),
        );
      }
      else {
        $block['content'] = 'No category items';
      }
      break;
  }
  return $block;
}

/**
 * Implementation of hook_theme().
 */
function pgh_application_theme() {
  return array(
    'form_table' => array(
      'render element' => 'element'
    )
  );
}

function theme_form_table($vars) {
  $element = $vars['element'];

  $header = array('c1', 'c2');
  foreach (element_children($element) as $key) {
    $rows[] = array(
      array('data' => 'r1'),
      array('data' => render($element[$key]))
    );
  }

  return theme('table', array('header' => $header, 'rows' => $rows));
}

/**
 * form test
 */
function pgh_application_testform($form, &$form_state) {
  $form['abc'][3] = array(
    '#type' => 'textfield',
    '#title' => 'abc',
  );

  $form['abc']['def'] = array(
    '#prefix' => '',
    '#tree' => TRUE,
    '#theme' => 'form_table'
  );

  $form['abc']['def'][4] = array(
    '#type' => 'textfield',
    '#title' => 'def',
    '#tree' => FALSE,
    // '#attributes' => array('id'=> 'edit-4', 'name' => '4'),
  );

  $form['option'] = array(
    '#type' => 'radios',
    '#title' => 'select the following',
    '#options' => array(0 => t('Closed'), 1 => t('Active')),
    '#default_value' => 0
  );

  $form['display'] = array(
    '#type' => 'textfield',
    '#title' => 'display me',
    '#states' => array(
      'visible' => array(
        ':input[name="option"]' => array('value' => 1)
      ),
    ),
  );

  // $form['abc']['def'] = array(
  //   '#markup' => render($form['abc']['def']),
  // );


  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'submit',
  );
  return $form;
}

function pgh_application_testform_submit($form, &$form_state) {
  dsm($form_state['values']);
}

function pgh_application_fileform($form, &$form_state) {
  $form['pgh'] = array(
    '#type' => 'file',
    '#title' => t('Upload video'),
    '#size' => 48,
    '#description' => t('Pick a video file to upload.'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'submit',
  );
  return $form;
}

function pgh_application_fileform_submit($form, &$form_state) {
  dsm($_FILES);
  $file = file_save_upload('pgh', array('file_validate_extensions' => array()), 'private://pgh');
  $file->status = 1;
  dsm($file);
  file_save($file);
}

function pgh_application_mediaform($form, &$form_state) {
  $form['pgh'] = array(
    '#type' => 'media',
    '#title' => t('Upload video'),
    '#input' => TRUE,
    '#media_options' => array(
      'global' => array(
        'types' => array('document'),
        'schemes' => array('http'),
      ),
    ),
    '#description' => t('Pick a video file to upload.'),
    '#attached' => array(),
    '#extended' => TRUE,
    // '#value' => array('fid' => 22),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'submit',
  );
  return $form;
}

function pgh_application_ajaxform($form, &$form_state) {
  $form = array();
  $form['changethis'] = array(
    '#title' => t("Choose something and explain why"),
    '#type' => 'select',
    '#options' => array(
      'one' => 'one',
      'two' => 'two',
      'three' => 'three',
    ),
    '#ajax' => array(
      'callback' => 'pgh_application_ajaxform_ajax',
      'wrapper' => 'replace_textfield_div',
    ),
  );

  $form['replace_textfield'] = array(
    '#type' => 'textfield',
    '#title' => t("Why"),
    // The prefix/suffix provide the div that we're replacing, named by
    // #ajax['wrapper'] above.
    '#prefix' => '<div id="replace_textfield_div">',
    '#suffix' => '</div>',
  );

  if (!empty($form_state['values']['changethis'])) {
    $form['replace_textfield']['#description'] = t("Say why you chose '@value'", array('@value' => $form_state['values']['changethis']));
  }
  return $form;
}

function pgh_application_ajaxform_ajax($form, $form_state) {
  return $form['replace_textfield'];
}

/**
 * Returns the nid of the currently displayed application or FALSE if th current page is not a valid application.
 *
 * @return int
 *   The nid of the currently displayed application or boolean FALSE.
 */
function pgh_application_current_application_nid() {
  if (arg(0) == 'application' && is_numeric(arg(1))) {
    $application_node = node_load(arg(1));
    if ($application_node->type == 'application') {
      return $application_node->nid;
    }
    else {
      // Supplied nid is invalid.
      return FALSE;
    }
  }
  else {
    // This is not an application page.
    return FALSE;
  }
}

/**
 * Returns an array of links to category pages for the specified application. Can be passed to theme_item_list().
 *
 * @param int $application_nid
 *   The nid of the application to generate category links for.
 *
 * @return array
 *   An array of links or an empty array if none are found or #application_nid is invalid.
 *
 * @author Jay Roberts <jay@designhammer.com>
 */
function pgh_application_category_links($application_nid) {
  if (!$application_nid) {
    return array();
  }

  $application_node = node_load($application_nid);
  if (!$application_node) {
    return array();
  }

  $application_wrapper = entity_metadata_wrapper('node', $application_node);
  $app_type_node = $application_wrapper->field_application_type->value();
  $app_type_wrapper = entity_metadata_wrapper('node', $app_type_node);

  $items = array();
  foreach ($app_type_wrapper->field_apptype_categories->getIterator() as $category_wrapper) {

    $title = $category_wrapper->title->value() . ' (no name provided)';
    if ($category_wrapper->body->value()) {
      $title = $category_wrapper->body->value->raw();
    }

    $options = array(
      'attributes' => array(
        'class' => array(
          'category-link',
          strtolower(str_replace('_', '-', $category_wrapper->title->value())),
        ),
      )
    );
    $items[] = l($title, 'application/' . $application_nid . '/category/' . $category_wrapper->title->value(), $options);
  }

  return $items;
}

function pgh_application_mediaform_submit($form, &$form_state) {
  dsm($form);
  dsm($form_state);
  dsm($_FILES);
}

/**
 * Return a page listing all applications.
 *
 * This is only for development purposes and should be removed or restricted before going live.
 *
 * @author Fang Jin <fang@designhammer.com>
 * @author Jay Roberts <jay@designhammer.com>
 */
function pgh_application_list_page() {

  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
                  ->propertyCondition('type', 'application')
                  ->execute();

  if (empty($result['node'])) {
    return '';
  }

  $lists = array();
  foreach ($result['node'] as $nid => &$value) {

    $app = node_load($nid);
    $app_wrapper = entity_metadata_wrapper('node', $app);

    $type = $app_wrapper->field_application_type->value();
    $type_wrapper = entity_metadata_wrapper('node', $type);

    $type_caption = $type_wrapper->body->value->raw();

    $lists[] = l($nid . ' - ' . $type_caption, 'application/' . $nid);
  }

  $out = array(
    '#theme' => 'item_list',
    '#items' => $lists,
    '#title' => t(''),
  );

  return drupal_render($out);
}


