<?php

/**
 * hook menu
 */
function pgh_application_menu() {
  $items['applications'] = array(
    'title' => 'All applications',
    'description' => 'List all applications',
    'page callback' => 'pgh_application_list_page',
    'page arguments' => array(),
    'access callback' => TRUE,
  );
  // test for explorering form api
  $items['testform'] = array(
    'title' => 'Form example',
    'description' => 'Test form features',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pgh_application_testform'),
    'access callback' => TRUE,
  );
  $items['testfile'] = array(
    'title' => 'File example',
    'description' => 'Test file upload',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pgh_application_fileform'),
    'access callback' => TRUE,
  );
  $items['testmedia'] = array(
    'title' => 'Media example',
    'description' => 'Test media file upload',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pgh_application_mediaform'),
    'access callback' => TRUE,
  );

  return $items;

}

/**
 * hook theme
 */
function pgh_application_theme() {
  return array(
    'form_table' => array(
      'render element' => 'element'
    )
  );
}

function theme_form_table($vars) {
  $element = $vars['element'];

  $header = array('c1', 'c2');
  foreach (element_children($element) as $key) {
    $rows[] = array(
      array('data' => 'r1'),
      array('data' => render($element[$key]))
    );
  }

  return theme('table', array('header' => $header, 'rows' => $rows));
}

/**
 * form test
 */
function pgh_application_testform($form, &$form_state) {
  $form['abc'][3] = array(
    '#type' => 'textfield',
    '#title' => 'abc',
  );

  $form['abc']['def'] = array(
    '#prefix' => '',
    '#tree' => TRUE,
    '#theme' => 'form_table'
  );

  $form['abc']['def'][4] = array(
    '#type' => 'textfield',
    '#title' => 'def',
    '#tree' => FALSE,
    // '#attributes' => array('id'=> 'edit-4', 'name' => '4'),
  );

  // $form['abc']['def'] = array(
  //   '#markup' => render($form['abc']['def']),
  // );


  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'submit',
  );
  return $form;
}

function pgh_application_testform_submit($form, &$form_state) {
  dsm($form_state['values']);
}

function pgh_application_fileform($form, &$form_state) {
  $form['pgh'] = array(
    '#type' => 'file',
    '#title' => t('Upload video'),
    '#size' => 48,
    '#description' => t('Pick a video file to upload.'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'submit',
  );
  return $form;
}

function pgh_application_fileform_submit($form, &$form_state) {
  dsm($_FILES);
  $file = file_save_upload('pgh', array('file_validate_extensions' => array()), 'private://pgh');
  $file->status = 1;
  dsm($file);
  file_save($file);
}

function pgh_application_mediaform($form, &$form_state) {
  $form['pgh'] = array(
    '#type' => 'media',
    '#title' => t('Upload video'),
    '#input' => TRUE,
    '#media_options' => array(
      'global' => array(
        'types' => array('document'),
        'schemes' => array('http'),
      ),
    ),
    '#description' => t('Pick a video file to upload.'),
    '#attached' => array(),
    '#extended' => TRUE,
    // '#value' => array('fid' => 22),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'submit',
  );
  return $form;
}

function pgh_application_mediaform_submit($form, &$form_state) {
  dsm($form);
  dsm($form_state);
  dsm($_FILES);
}

/**
 * Return a page listing all applications
 */
function pgh_application_list_page() {

  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
                  ->propertyCondition('type', 'application')
                  ->execute();
  if (empty($result['node'])) return '';

  $lists = array();
  foreach ($result['node'] as $nid => &$value) {

    $app = node_load($nid);
    $app_wrapper = entity_metadata_wrapper('node', $app);


    $type = $app_wrapper->field_application_type->value();
    $type_wrapper = entity_metadata_wrapper('node', $type);

    $type_caption = $type_wrapper->body->value->raw();

    $lists[] = l($nid . ' - ' . $type_caption, 'application/' . $nid . '/category//edit');
  }

  $out = array(
    '#theme' => 'item_list',
    '#items' => $lists,
    '#title' => t(''),
    // '#attributes' => array('class' => array('my-links')),
  );

  return drupal_render($out);
}


