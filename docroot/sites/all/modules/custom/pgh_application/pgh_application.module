<?php

/**
 * @file
 * Provides internal functionality for handling applications.
 *
 * Other application form specific functionality can be found in the pgh_form module.
 *
 * @author Jay Roberts <jay@designhammer.com>
 * @author Fang Jin <fang@designhammer.com>
 */

/**
 * Implements hook_menu().
 *
 * @author Fang Jin <fang@designhammer.com>
 */
function pgh_application_menu() {
  $items = array();

  $items['application/%node/delete'] = array(
    'title' => 'Delete Application',
    'description' => 'Delete application and its associated entities, ex. Responses etc.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pgh_application_delete_form', 1),
    'access callback' => 'node_access',
    'access arguments' => array('delete', 1),
  );

  return $items;
}

/**
 * Implementation of hook_form_node_form_alter().
 *
 * Allows a user to specify a Business Unit nid in the query string when adding a new application node. This
 * value will be included in the node add form. This will then be used in hook_node_insert() to update the
 * Business Unit's field_applications with the newly created Application nid.
 *
 * @param array $form
 *   Nested array of form elements that comprise the form.
 *
 * @param array $form_state
 *   A keyed array containing the current state of the form.
 *
 * @param string $form_id
 *   String representing the name of the form itself.
 *
 * @author Jay Roberts <jay@designhammer.com>
 */
function pgh_application_form_node_form_alter(&$form, &$form_state, $form_id) {
  if ($form['type']['#value'] == 'application') {
    $bid = '';

    if (isset($_GET['bid'])) {
      $bid = $_GET['bid'];
    }
    elseif (isset($form_state['node']) && isset($form_state['node']->nid)) {
      $business_unit = pgh_api_business_unit_for_application($form_state['node']->nid);
      if ($business_unit) {
        $bid = $business_unit->nid;
      }
    }

    // Remove application types which are not valid for this Business Unit.
    $valid_types = pgh_api_valid_application_types_for_business_unit(node_load($bid));
    $valid_types = array_keys($valid_types);
    $valid_types[] = '_none';

    foreach ($form['field_application_type']['und']['#options'] as $id => $name) {
      if (!in_array($id, $valid_types)) {
        unset($form['field_application_type']['und']['#options'][$id]);
      }
    }

    $form['business_unit'] = array(
      '#type' => 'hidden',
      '#value' => $bid,
    );

    // We will be auto-generating the node title and body so don't do anything with it here.
    unset($form['title']);
    unset($form['body']);

    $form['field_application_status'] = array(
      '#type' => 'hidden',
      '#value' => array('new'),
    );

    // Redirect to dashboard after saving node.
    $form['actions']['submit']['#submit'][] = 'pgh_application_form_node_form_submit';

    // Don't validate on deletion.
    $form['actions']['delete']['#limit_validation_errors'] = array();
  }
}

/**
 * Ensure the Application has valid parent Business Unit which the user has permission to update.
 *
 * @param object $node
 *   The node being validated.
 *
 * @param array $form
 *   Nested array of form elements that comprise the form.
 *
 * @param array $form_state
 *   A keyed array containing the current state of the form.
 *
 * @author  Jay Roberts <jay@designhammer.com>
 */
function pgh_application_node_validate($node, $form, &$form_state) {
  // Don't do additional validation when deleting.
  if ($form_state['clicked_button']['#value'] == 'delete') {
    return;
  }

  if ($node->type !== 'application') {
    return;
  }

  if (!isset($node->business_unit)) {
    form_set_error('business_unit', 'Business unit is required');
    return;
  }

  if (!is_numeric($node->business_unit)) {
    form_set_error('business_unit', 'Invalid Business unit');
    return;
  }

  $business_unit = node_load($node->business_unit);

  if (!$business_unit) {
    form_set_error('business_unit', 'Invalid Business unit');
    return;
  }

  if (!entity_access('update', 'node', $business_unit)) {
    form_set_error('business_unit', 'You do not have permission to modify this Business Unit.');
    return;
  }

  // One application of each valid type per business unit.
  $business_unit_wrapper = entity_metadata_wrapper('node', $business_unit);

  $open_statuses = array(
    'new',
    'in-progress',
    'submitted',
    'assigned-for-review',
    'review-in-progress',
  );

  foreach ($business_unit_wrapper->field_applications->getIterator() as $application_wrapper) {
    if ($application_wrapper->field_application_type->value() == $node->field_application_type['und'][0]['value'] &&
        in_array($application_wrapper->field_application_status->value(), $open_statuses)) {

      $application_type = pgh_api_application_type_by_id($application_wrapper->field_application_type->value());
      $application_type_wrapper = entity_metadata_wrapper('node', $application_type);

      form_set_error('business_unit', t('There is already an open @type application for this Business Unit.', array('@type' => $application_type_wrapper->body->value->raw())));
      return;
    }
  }

}

/**
 * Implementation of hook_node_presave().
 *
 * Auto-generate the application title and body.
 *
 * @param object $node
 *   The node that is being inserted or updated.
 *
 * @author  Jay Roberts <jay@designhammer.com>
 */
function pgh_application_node_presave($node) {
  if ($node->type !== 'application') {
    return;
  }

  // Auto-generate application title.
  //
  // $node->business_unit will be set by the node creation form but may not be available when
  // saving an application later. Only auto generate if we actually have a business_unit.
  if (isset($node->business_unit)) {
    $business_unit = node_load($node->business_unit);
    $application_type_id = field_get_items('node', $node, 'field_application_type');
    $application_type_id = $application_type_id[0]['value'];

    $application_type = pgh_api_application_type_by_id($application_type_id);

    $node->title = $application_type->body['und'][0]['value'];
    $node->body['und'][0]['value'] = $application_type->body['und'][0]['value'] . ' application for ' . $business_unit->title;
  }
}

/**
 * Updates a Business Unit with an entity reference to a newly saved Application node.
 *
 * Pre-generates Response objects for each question in the Application's Application Type.
 *
 * @param object $node
 *   The inserted node.
 *
 * @author Jay Roberts <jay@designhammer.com>
 */
function pgh_application_node_insert($node) {
  if ($node->type != 'application') {
    return;
  }

  $business_unit = node_load($node->business_unit);

  if ($business_unit) {
    $business_unit_wrapper = entity_metadata_wrapper('node', $business_unit);
    $business_unit_wrapper->field_applications[] = intval($node->nid);
    $business_unit_wrapper->save();
  }

  // Create child response objects for each question in this application's type.
  $questions = pgh_api_questions_for_application($node->nid);
  foreach ($questions as $question) {
    pgh_api_set_response($node->nid, $question->nid, array(), TRUE);
  }
}

/**
 * Updates a Business Unit to remove an entity reference to a deleted Application node.
 *
 * @param object $node
 *   The inserted node.
 *
 * @author Jay Roberts <jay@designhammer.com>
 */
function pgh_application_node_delete($node) {
  if ($node->type != 'application') {
    return;
  }

  // Get parent Business Unit.
  $business_unit = pgh_api_business_unit_for_application($node->nid);

  if (!$business_unit) {
    return;
  }

  // $business_unit_wrapper = entity_metadata_wrapper('node', $business_unit);

  // Remove the deleted Application from the parent Business Unit.
  // for ($i = 0; $i < count($business_unit_wrapper->field_applications->value()); $i++) {
  //   if ($business_unit_wrapper->field_applications[$i]->value()->nid == $node->nid) {
  //     $business_unit_wrapper->field_applications[$i]->set(NULL);
  //     $business_unit_wrapper->save();
  //     break;
  //   }
  // }

  // Remove deleted application from the parent business unit
  // The reason i have to do the following way is to make sure
  // We don't get a hole in the multiple value field after deletion
  // And I don't know how to do wrapper way.
  if (!empty($business_unit->field_applications['und'])) {
    $applications = &$business_unit->field_applications['und'];
    foreach ($applications as $id => $value) {
      if ($value['target_id'] == $node->nid) {
        array_splice($applications, $id, 1);
        node_save($business_unit);
        break;
      }
    }
  }
}

/**
 * Redirect to dashboard age after saving node.
 *
 * @param array $form
 *   Nested array of form elements that comprise the form.
 *
 * @param array $form_state
 *   A keyed array containing the current state of the form.
 *
 * @author Jay Roberts <jay@designhammer.com>
 */
function pgh_application_form_node_form_submit($form, &$form_state) {
  if (!empty($form_state['nid'])) {
    $form_state['redirect'] = 'dashboard';
  }
}


/**
 * Implementation of hook_block_info().
 */
function pgh_application_block_info() {
  $blocks = array();

  $blocks['application_category_menu'] = array(
    'info' => t('Application Category Menu'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implementation of hook_block_view().
 */
function pgh_application_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'application_category_menu':
      $block['subject'] = t('Application Category Menu');
      $application_nid = pgh_application_current_application_nid();
      $category_links = pgh_application_category_links($application_nid);

      $class = 'category-menu';
      if (count($category_links) == 1) {
        $class .= ' single-item';
      }

      if ($category_links) {
        $block['content'] = array(
          'list' => array(
            '#theme' => 'item_list',
            '#type' => 'ul',
            '#attributes' => array('class' => $class),
            '#items' => $category_links,
          ),
        );
      }
      else {
        $block['content'] = 'No category items';
      }
      break;
  }
  return $block;
}

/**
 * Implementation of hook_theme().
 */
function pgh_application_theme() {
  return array(
    'form_table' => array(
      'render element' => 'element'
    )
  );
}

/**
 * Returns the nid of the currently displayed application or FALSE if th current page is not a valid application.
 *
 * @return int
 *   The nid of the currently displayed application or boolean FALSE.
 */
function pgh_application_current_application_nid() {
  if (arg(0) == 'application' && is_numeric(arg(1))) {
    $application_node = node_load(arg(1));
    if ($application_node->type == 'application') {
      return $application_node->nid;
    }
    else {
      // Supplied nid is invalid.
      return FALSE;
    }
  }
  else {
    // This is not an application page.
    return FALSE;
  }
}

/**
 * Returns an array of links to category pages for the specified application. Can be passed to theme_item_list().
 *
 * @param int $application_nid
 *   The nid of the application to generate category links for.
 *
 * @return array
 *   An array of links or an empty array if none are found or #application_nid is invalid.
 *
 * @author Jay Roberts <jay@designhammer.com>
 */
function pgh_application_category_links($application_nid) {
  if (!$application_nid) {
    return array();
  }

  $application_node = node_load($application_nid);
  if (!$application_node) {
    return array();
  }

  $application_wrapper = entity_metadata_wrapper('node', $application_node);
  $app_type_node = pgh_api_application_type_by_id($application_wrapper->field_application_type->value());
  $app_type_wrapper = entity_metadata_wrapper('node', $app_type_node);

  $items = array();
  foreach ($app_type_wrapper->field_apptype_categories->getIterator() as $category_wrapper) {

    $title = $category_wrapper->title->value() . ' (no name provided)';
    if ($category_wrapper->body->value()) {
      $title = $category_wrapper->body->value->raw();
    }

    $options = array(
      'attributes' => array(
        'class' => array(
          'category-link',
          strtolower(str_replace('_', '-', $category_wrapper->title->value())),
        ),
      )
    );
    $items[] = l($title, 'application/' . $application_nid . '/category/' . $category_wrapper->title->value(), $options);
  }

  return $items;
}

/**
 * Form callback for deleteing a specific application.
 *
 * @param array $form
 *   Form array.
 *
 * @param array $form_state
 *   Form state array.
 *
 * @param id $app_id
 *   Application node.
 *
 * @return array
 *   A Drupal form array ready to be rendered.
 *
 * @author Fang Jin <fang@designhammer.com>
 */
function pgh_application_delete_form($form, &$form_state, $app_id) {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Delete',
  );

  $form['application'] = array(
    '#type' => 'hidden',
    '#value' => $app_id
  );

  return $form;
}

/**
 * Form submission handler for application deletion.
 *
 * @param array $form
 *   Form array.
 *
 * @param array $form_state
 *   Form state array.
 *
 * @return array
 *   A form array.
 *
 * @author Fang Jin <fang@designhammer.com>
 */
function pgh_application_delete_form_submit($form, &$form_state) {
  $nid = &$form_state['values']['application'];

  // Remove all response from this application.
  $responses = pgh_api_responses_ids_for_application($nid);
  if ($responses) {
    // This is one time operation.
    // node_delete_multiple($responses); .
    // Here is batch operation.
    node_mass_operation($responses, 'delete');
  }

  // Remove the application
  // We should remove the application when the batch is finished
  // However I found it hard to send $nid to the batch api
  node_delete($nid);
}