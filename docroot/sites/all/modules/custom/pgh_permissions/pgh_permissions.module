<?php

/**
 * @file
 * User permissions module.
 *
 * Provides functions for determining if a given user can access a piece of awards content. This is currently
 * handled primarily through hook_node_access().
 *
 * @author Jay Roberts <jay@designhammer.com>
 */

/**
 * Implementation of hook_permission().
 */
function pgh_permissions_permission() {
  return array(
    'administer awards system' => array(
      'title' => t('Administer awards system'),
      'description' => t('View and modify all PGH awards system content and settings.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implementation of hook_node_access().
 *
 * Determine if we care about specifying permissions for this node and call a type-specific function to handle
 * the actual permissions checking.
 *
 * @param object $node
 *   Either a node object or the machine name of the content type on which to perform the access check.
 *
 * @param string $op
 *   The operation to be performed. Possible values: create, delete, update, view.
 *
 * @param object $account
 *   The user object to perform the access check operation on.
 *
 * @return int
 *   One of NODE_ACCESS_ALLOW, NODE_ACCESS_DENY, NODE_ACCESS_IGNORE.
 *
 * @author Jay Roberts <jay@designhammer.com>
 */
function pgh_permissions_node_access($node, $op, $account) {
  $type = is_string($node) ? $node : $node->type;

  // Only determine permissions if this is a node with one of the PGH specific node types.
  if (!in_array($type, array('work_group', 'business_unit', 'application'))) {
    return NODE_ACCESS_IGNORE;
  }

  // Call type-specific permission hook, see below.
  $function = __FUNCTION__ . '_' . $type;
  return $function($node, $op, $account);
}

/**
 * Implementation of hook_node_access().
 *
 * @param object $work_group
 *   Either a node object or the machine name of the content type on which to perform the access check.
 *
 * @param string $op
 *   The operation to be performed. Possible values: create, delete, update, view.
 *
 * @param object $account
 *   The user object to perform the access check operation on.
 *
 * @return int
 *   One of NODE_ACCESS_ALLOW, NODE_ACCESS_DENY, NODE_ACCESS_IGNORE.
 *
 * @author Jay Roberts <jay@designhammer.com>
 */
function pgh_permissions_node_access_work_group($work_group, $op, $account) {
  switch ($op) {
    case 'create':
      if (user_access('administer awards system', $account)) {
        return NODE_ACCESS_ALLOW;
      }
      else {
        return NODE_ACCESS_DENY;
      }
      break;

    case 'delete':
      if (user_access('administer awards system', $account)) {
        return NODE_ACCESS_ALLOW;
      }
      else {
        return NODE_ACCESS_DENY;
      }
      break;

    case 'update':
      if (user_access('administer awards system', $account)) {
        return NODE_ACCESS_ALLOW;
      }

      // Work Group administrators can make changes.
      $work_group_wrapper = entity_metadata_wrapper('node', $work_group);
      foreach ($work_group_wrapper->field_administrators->getIterator() as $administrator) {
        if ($administrator->uid->value() == $account->uid) {
          return NODE_ACCESS_ALLOW;
        }
      }
      return NODE_ACCESS_DENY;

    case 'view':
      if (user_access('administer awards system', $account)) {
        return NODE_ACCESS_ALLOW;
      }

      // Work Group administrators can view.
      $work_group_wrapper = entity_metadata_wrapper('node', $work_group);
      foreach ($work_group_wrapper->field_administrators->getIterator() as $administrator) {
        if ($administrator->uid->value() == $account->uid) {
          return NODE_ACCESS_ALLOW;
        }
      }

      // Business Unit users under this Work Group can view.
      foreach ($work_group_wrapper->field_business_units->getIterator() as $business_unit) {
        foreach ($business_unit->field_users->getIterator() as $business_unit_user) {
          if ($business_unit_user->uid->value() == $account->uid) {
            return NODE_ACCESS_ALLOW;
          }
        }
      }
      return NODE_ACCESS_DENY;
  }

  return NODE_ACCESS_DENY;
}

/**
 * Implementation of hook_node_access().
 *
 * @param object $business_unit
 *   Either a node object or the machine name of the content type on which to perform the access check.
 *
 * @param string $op
 *   The operation to be performed. Possible values: create, delete, update, view.
 *
 * @param object $account
 *   The user object to perform the access check operation on.
 *
 * @return int
 *   One of NODE_ACCESS_ALLOW, NODE_ACCESS_DENY, NODE_ACCESS_IGNORE.
 *
 * @author Jay Roberts <jay@designhammer.com>
 */
function pgh_permissions_node_access_business_unit($business_unit, $op, $account) {
  switch ($op) {
    case 'create':
      if (user_access('administer awards system', $account)) {
        return NODE_ACCESS_ALLOW;
      }
      // The permission 'create business_unit content' should be explicitly granted to the CLiant Admin role.
      if (user_access('create business_unit content', $account)) {
        return NODE_ACCESS_ALLOW;
      }
      return NODE_ACCESS_DENY;

    case 'delete':
      if (user_access('administer awards system', $account)) {
        return NODE_ACCESS_ALLOW;
      }
      else {
        return NODE_ACCESS_DENY;
      }
      break;

    case 'update':
      if (user_access('administer awards system', $account)) {
        return NODE_ACCESS_ALLOW;
      }

      // Work Group administrators can update.
      $work_groups = pgh_api_work_groups_for_business_unit($business_unit->nid);
      foreach ($work_groups as $work_group) {
        $work_group_wrapper = entity_metadata_wrapper('node', $work_group);
        foreach ($work_group_wrapper->field_administrators->getIterator() as $administrator) {
          if ($administrator->uid->value() == $account->uid) {
            return NODE_ACCESS_ALLOW;
          }
        }
      }

      // Business Unit users can update.
      $business_unit_wrapper = entity_metadata_wrapper('node', $business_unit);
      foreach ($business_unit_wrapper->field_users->getIterator() as $business_unit_user) {
        if ($business_unit_user->uid->value() == $account->uid) {
          return NODE_ACCESS_ALLOW;
        }
      }
      break;

    case 'view':
      if (user_access('administer awards system', $account)) {
        return NODE_ACCESS_ALLOW;
      }

      // Work Group administrators can view.
      $work_groups = pgh_api_work_groups_for_business_unit($business_unit->nid);
      foreach ($work_groups as $work_group) {
        $work_group_wrapper = entity_metadata_wrapper('node', $work_group);
        foreach ($work_group_wrapper->field_administrators->getIterator() as $administrator) {
          if ($administrator->uid->value() == $account->uid) {
            return NODE_ACCESS_ALLOW;
          }
        }
      }

      // Business Unit users can view.
      $business_unit_wrapper = entity_metadata_wrapper('node', $business_unit);
      foreach ($business_unit_wrapper->field_users->getIterator() as $business_unit_user) {
        if ($business_unit_user->uid->value() == $account->uid) {
          return NODE_ACCESS_ALLOW;
        }
      }
      break;
  }

  return NODE_ACCESS_DENY;
}

/**
 * Implementation of hook_node_access().
 *
 * @param object $application
 *   Either a node object or the machine name of the content type on which to perform the access check.
 *
 * @param string $op
 *   The operation to be performed. Possible values: create, delete, update, view.
 *
 * @param object $account
 *   The user object to perform the access check operation on.
 *
 * @return int
 *   One of NODE_ACCESS_ALLOW, NODE_ACCESS_DENY, NODE_ACCESS_IGNORE.
 *
 * @author Jay Roberts <jay@designhammer.com>
 */
function pgh_permissions_node_access_application($application, $op, $account) {
  switch ($op) {
    case 'create':
      if (user_access('administer awards system', $account)) {
        return NODE_ACCESS_ALLOW;
      }

      if (user_access('create application content', $account)) {
        return NODE_ACCESS_ALLOW;
      }
      return NODE_ACCESS_DENY;

    case 'delete':
      if (user_access('administer awards system', $account)) {
        return NODE_ACCESS_ALLOW;
      }
      else {
        return NODE_ACCESS_DENY;
      }
      break;

    case 'update':
      // - If user has 'administer awards system', return NODE_ACCESS_ALLOW
      if (user_access('administer awards system', $account)) {
        return NODE_ACCESS_ALLOW;
      }

      // If the application's current status is one of the locked down statuses, return NODE_ACCESS_DENY
      $application_wrapper = entity_metadata_wrapper('node', $application);
      $locked = array(
        'submitted',
        'assigned-for-review',
        'review-in-progress',
        'final-scoring-complete',
        'initial-award-recommended',
        'review-complete',
        'final-award-determined',
      );
      if (in_array($application_wrapper->field_application_status->value(), $locked)) {
        return NODE_ACCESS_DENY;
      }

      $business_unit = pgh_api_business_unit_for_application($application->nid);

      if (!$business_unit) {
        // Non-admins should not be able to update orphan applications.
        return NODE_ACCESS_DENY;
      }

      // Work Group administrators can update.
      $work_groups = pgh_api_work_groups_for_business_unit($business_unit->nid);
      foreach ($work_groups as $work_group) {
        $work_group_wrapper = entity_metadata_wrapper('node', $work_group);
        foreach ($work_group_wrapper->field_administrators->getIterator() as $administrator) {
          if ($administrator->uid->value() == $account->uid) {
            return NODE_ACCESS_ALLOW;
          }
        }
      }

      // Business Unit users can update.
      $business_unit_wrapper = entity_metadata_wrapper('node', $business_unit);
      foreach ($business_unit_wrapper->field_users->getIterator() as $business_unit_user) {
        if ($business_unit_user->uid->value() == $account->uid) {
          return NODE_ACCESS_ALLOW;
        }
      }

      return NODE_ACCESS_DENY;

    case 'view':
      // - If user has 'administer awards system', return NODE_ACCESS_ALLOW
      if (user_access('administer awards system', $account)) {
        return NODE_ACCESS_ALLOW;
      }

      $business_unit = pgh_api_business_unit_for_application($application->nid);

      if (!$business_unit) {
        // Non-admins should not be able to view orphan applications.
        return NODE_ACCESS_DENY;
      }

      // Work Group administrators can view.
      $work_groups = pgh_api_work_groups_for_business_unit($business_unit->nid);
      foreach ($work_groups as $work_group) {
        $work_group_wrapper = entity_metadata_wrapper('node', $work_group);
        foreach ($work_group_wrapper->field_administrators->getIterator() as $administrator) {
          if ($administrator->uid->value() == $account->uid) {
            return NODE_ACCESS_ALLOW;
          }
        }
      }

      // Business Unit users can view.
      $business_unit_wrapper = entity_metadata_wrapper('node', $business_unit);
      foreach ($business_unit_wrapper->field_users->getIterator() as $business_unit_user) {
        if ($business_unit_user->uid->value() == $account->uid) {
          return NODE_ACCESS_ALLOW;
        }
      }

      return NODE_ACCESS_DENY;
  }

  return NODE_ACCESS_IGNORE;
}

/**
 * Implementation of hook_form_node_form_alter().
 *
 * Allows a user to specify a Work Group nid in the query string when adding a new Business Unit node. This
 * value will be included in the node add form. This will then be used in hook_node_insert() to update the
 * Work Group's field_business_units with the newly created Business Unit nid.
 *
 * @param array $form
 *   Nested array of form elements that comprise the form.
 *
 * @param array $form_state
 *   A keyed array containing the current state of the form.
 *
 * @param string $form_id
 *   String representing the name of the form itself.
 *
 * @author Jay Roberts <jay@designhammer.com>
 */
function pgh_permissions_form_node_form_alter(&$form, &$form_state, $form_id) {
  if ($form['type']['#value'] == 'business_unit') {
    $wgid = '';

    if (isset($_GET['wgid'])) {
      $wgid = $_GET['wgid'];
      $form['work_group'] = array(
        '#type' => 'hidden',
        '#value' => $wgid,
      );

    }
    elseif (user_access('administer awards system')) {
      $form['work_group'] = array(
        '#type' => 'select',
        '#options' => pgh_api_all_work_groups_options(),
      );
    }

    // Non administrators should not be able to change the title of a business unit.
    if (!user_access('administer awards system')) {
      $form['title']['#access'] = FALSE;
    }

    // Redirect to dashboard after saving node.
    $form['actions']['submit']['#submit'][] = 'pgh_permissions_form_node_form_submit';

    // Don't validate on deletion.
    $form['actions']['delete']['#limit_validation_errors'] = array();
  }
  elseif ($form['type']['#value'] == 'work_group') {
    // Non administrators should not be able to change the title of a work group.
    if (!user_access('administer awards system')) {
      $form['title']['#access'] = FALSE;
    }
  }
}

/**
 * Ensure the Business Unit has a valid parent Work Group which the user has permission to update.
 *
 * @param object $node
 *   The node being validated.
 *
 * @param array $form
 *   Nested array of form elements that comprise the form.
 *
 * @param array $form_state
 *   A keyed array containing the current state of the form.
 *
 * @author  Jay Roberts <jay@designhammer.com>
 */
function pgh_permissions_node_validate($node, $form, &$form_state) {
  if ($node->type !== 'business_unit') {
    return;
  }

  // If work_group is specified ensure it is a valid Work Group node and that the
  // user has permission to modify it (by adding a Business Unit to it).
  if (isset($node->work_group)) {
    if (!is_numeric($node->work_group)) {
      form_set_error('work_group', 'Invalid Work Group');
      return;
    }

    $work_group = node_load($node->work_group);

    if (!$work_group) {
      form_set_error('work_group', 'Invalid Work Group');
      return;
    }

    if (!entity_access('update', 'node', $work_group)) {
      form_set_error('work_group', 'You do not have permission to modify this Work Group.');
      return;
    }
  }
}

/**
 * Updates a Work Group with an entity reference to a newly saved Business Unit node.
 *
 * @param object $node
 *   The inserted node.
 *
 * @author Jay Roberts <jay@designhammer.com>
 */
function pgh_permissions_node_insert($node) {
  if ($node->type != 'business_unit') {
    return;
  }

  // If we are migrating Business Units they may not have a Work Group set. In this case
  // do nothing.
  if (!isset($node->work_group)) {
    return;
  }

  $work_group = node_load($node->work_group);
  $work_group_wrapper = entity_metadata_wrapper('node', $work_group);
  $work_group_wrapper->field_business_units[] = intval($node->nid);
  $work_group_wrapper->save();
}

/**
 * Updates a Work Group to remove an entity reference to a deleted Business Unit node.
 *
 * @param object $node
 *   The inserted node.
 *
 * @author Jay Roberts <jay@designhammer.com>
 */
function pgh_permissions_node_delete($node) {
  if ($node->type != 'business_unit') {
    return;
  }

  // Get parent Work Groups.
  $work_groups = pgh_api_work_groups_for_business_unit($node->nid);

  // If the Business Unit doesn't have any Work Groups (maybe it was migrated or created manually)
  // do nothing.
  if (!$work_groups) {
    return;
  }

  foreach ($work_groups as $work_group) {
    $work_group_wrapper = entity_metadata_wrapper('node', $work_group);

    // Remove the deleted Business Unit from the parent Work Group.
    for ($i = 0; $i < count($work_group_wrapper->field_business_units->value()); $i++) {
      if ($work_group_wrapper->field_business_units[$i]->value()->nid == $node->nid) {
        $work_group_wrapper->field_business_units[$i]->set(NULL);
        $work_group_wrapper->save();
        break;
      }
    }
  }
}

/**
 * Redirect to dashboard age after saving node.
 *
 * @param array $form
 *   Nested array of form elements that comprise the form.
 *
 * @param array $form_state
 *   A keyed array containing the current state of the form.
 *
 * @author Jay Roberts <jay@designhammer.com>
 */
function pgh_permissions_form_node_form_submit($form, &$form_state) {
  if (!empty($form_state['nid'])) {
    $form_state['redirect'] = 'dashboard';
  }
}
