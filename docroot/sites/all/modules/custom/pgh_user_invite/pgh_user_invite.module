<?php

/**
 * @file
 * User invitation module.
 *
 * @author Jay Roberts <jay@designhammer.com>
 */


/**
 * Implementation of hook_menu().
 */
function pgh_user_invite_menu() {
  $items = array();

  $items['invite'] = array(
    'title' => 'Invite Users',
    'description' => 'Invite users to a Business Unit',
    'page callback' => 'pgh_user_invite_page',
    'access callback' => 'user_access',
    'access arguments' => array('invite users business unit'),
  );

  return $items;
}

/**
 * Implementation of hook_permission().
 */
function pgh_user_invite_permission() {
  return array(
    'invite users business unit' => array(
      'title' => t('Invite users to a Business Unit'),
      'description' => t('Invite users to a Business Unit by email, adding existing accounts and creating accounts for new users.'),
      'restrict access' => FALSE,
    ),
  );
}

/**
 * Page callback for the user invitation page.
 *
 * @return string
 *   Page content.
 *
 * @author Jay Roberts <jay@designhammer.com>
 */
function pgh_user_invite_page() {
  if (isset($_GET['bid'])) {
    $business_unit = node_load($_GET['bid']);

    if (!$business_unit) {
      return MENU_NOT_FOUND;
    }

    if (!entity_access('update', 'node', $business_unit)) {
      return MENU_ACCESS_DENIED;
    }

    drupal_set_title('Invite users to ' . $business_unit->title);

    return drupal_get_form('pgh_user_invite_form', $business_unit);
  }

  return MENU_NOT_FOUND;
}


/**
 * Form callback for the user invitation form.
 *
 * @param array $form
 *   Form array.
 *
 * @param array $form_state
 *   Form state array.
 *
 * @return array
 *   A Drupal form array ready to be rendered.
 *
 * @author Jay Roberts <jay@designhammer.com>
 */
function pgh_user_invite_form($form, &$form_state, $owner) {
  $form = array();

  $step = NULL;
  if (isset($form_state['storage']) && isset($form_state['storage']['step'])) {
    $step = $form_state['storage']['step'];
  }

  switch ($step) {
    case NULL:
      $form['owner'] = array(
        '#type' => 'hidden',
        '#value' => $owner->nid,
      );

      $form['emails'] = array(
        '#type' => 'textarea',
        '#title' => 'Email addresses',
        '#description' => t('Enter email addresses of up to 5 users, one per line. Duplicate addresses will be ignored.'),
        '#default_value' => '',
        '#rows' => 5,
        '#required' => TRUE,
      );

      $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Send invitations'),
      );
      break;

    case 'confirm':
      $form['owner'] = array(
        '#type' => 'hidden',
        '#value' => $owner->nid,
      );

      $list = array(
        'items' => $form_state['storage']['valid_emails'],
        'title' => t('Are your sure you want to send invitations to these @count email addresses?', array('@count' => count($form_state['storage']['valid_emails']))),
        'attributes' => array(),
        'type' => 'ul',
      );

      $form['preview'] = array(
        '#prefix' => '<p>',
        '#markup' => theme_item_list($list),
        '#suffix' => '</p>',
      );

      $form['cancel'] = array(
        '#type' => 'submit',
        '#value' => t('Cancel'),
        '#submit' => array('pgh_user_invite_form_cancel'),
        '#limit_validation_errors' => array(),
      );

      $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Send invitations'),
        '#submit' => array('pgh_user_invite_form_process'),
      );
      break;
  }

  return $form;
}

/**
 * Submit handler for cancel button.
 *
 * @param array $form
 *   Form array.
 *
 * @param array $form_state
 *   Form state array.
 *
 * @author Jay Roberts <jay@designhammer.com>
 */
function pgh_user_invite_form_cancel($form, &$form_state) {
  drupal_goto('dashboard');
}

/**
 * Ensure owner node is valid and check for valid email addresses.
 *
 * Keep in mind that this validation code runs for each form step as well as the cancel button.
 *
 * @param array $form
 *   Form array.
 *
 * @param array $form_state
 *   Form state array.
 *
 * @author Jay Roberts <jay@designhammer.com>
 */
function pgh_user_invite_form_validate($form, &$form_state) {
  if ($form_state['triggering_element']['#value'] == 'Cancel') {
    return;
  }

  // Fetch owner (the Business Unit that the new users will be added to).
  $owner = NULL;
  if (isset($form_state['values']['owner'])) {
    $owner = node_load($form_state['values']['owner']);
  }
  if (!$owner || !in_array($owner->type, array('business_unit'))) {
    form_set_error('owner', 'Invalid owner.');
  }

  // Fetch potential email addresses, skip blank or empty lines.
  $email_text = isset($form_state['values']['emails']) ? $form_state['values']['emails'] : '';
  $emails = array();
  $errors = array();

  foreach (explode("\n", $email_text) as $line) {
    $line = trim($line);

    // Skip blank lines.
    if ($line == '') {
      continue;
    }

    // Sanity check for line length, we are expecting each email address to be 128 characters or less.
    if (strlen($line) > 128) {
      form_set_error('email', 'Input line is too long.');
      return;
    }

    if (!filter_var($line, FILTER_VALIDATE_EMAIL)) {
      $errors[] = t('%line is not a valid email address.', array('%line' => $line));
      continue;
    }

    // Some valid email addresses (email+example@gmail.com) contain characters which are invalid for Drupal usernames.
    // If we don't stop it here then the user will be able to use the one-time log in link but will never be able to
    // change their password.
    if ($username_error = user_validate_name($line)) {
      $errors[] = t('%line contains unsupported characters.', array('%line' => $line));
      continue;
    }

    $emails[] = $line;
  }

  if ($errors) {
    $list = array(
      'items' => $errors,
      'title' => '',
      'attributes' => array(),
      'type' => 'ul',
    );
    $message = theme_item_list($list);
    form_set_error('email', render($message));
    return;
  }
}

/**
 * Process emails and show confirmation form.
 *
 * @param array $form
 *   Form array.
 *
 * @param array $form_state
 *   Form state array.
 *
 * @author Jay Roberts <jay@designhammer.com>
 */
function pgh_user_invite_form_submit($form, &$form_state) {
  // Fetch potential email addresses, skip blank or empty lines.
  $emails = array();
  foreach (explode("\n", $form_state['values']['emails']) as $line) {
    $line = trim($line);

    // Skip blank lines.
    if ($line == '') {
      continue;
    }

    $emails[] = $line;
  }

  $form_state['rebuild'] = TRUE;
  $form_state['storage']['step'] = 'confirm';
  $form_state['storage']['valid_emails'] = $emails;
}

/**
 * Process emails and send invitations.
 *
 * If an email address exists in Drupal the user account will be added to the Business Unit.
 *
 * @param array $form
 *   Form array.
 *
 * @param array $form_state
 *   Form state array.
 *
 * @author Jay Roberts <jay@designhammer.com>
 */
function pgh_user_invite_form_process($form, &$form_state) {
  global $user;

  // Fetch owner (the Business Unit that the new users will be added to).
  $owner = node_load($form_state['values']['owner']);
  $invited_users = array();
  $pending_users = array();

  foreach ($form_state['storage']['valid_emails'] as $email) {
    $invite_user = user_load_by_mail($email);
    if (!$invite_user) {
      // Create a new user object.
      $new_user = array(
        'name' => $email,
        'mail' => $email,
        'pass' => user_password(8),
        'status' => 1,
        'init' => $email,
      );

      $invite_user = user_save(NULL, $new_user);

      if (!$invite_user) {
        drupal_set_message(t('There was a problem inviting %email', array('%email' => $email)));
      }

      // Send the new account notification.
      drupal_mail('user',
        'register_no_approval_required',
        $invite_user->mail,
        language_default(),
        array('account' => $invite_user),
        variable_get('site_mail', ini_get('sendmail_from')));

      // Grant the Business Unit role to this user if not already granted.
      if ($role = user_role_load_by_name('Business Unit User')) {
        user_multiple_role_edit(array($invite_user->uid), 'add_role', $role->rid);
      }

      // Add the user to the owner Business Unit.
      pgh_api_add_user_to_business_unit($invite_user, $owner);

      $invited_users[] = $invite_user;

      drupal_set_message(t('Sent invitation to %email', array('%email' => $email)));

    } else {
      $pending_users[] = $invite_user;

      // User account exists.
      drupal_set_message(t('An invitation to %email is pending.', array('%email' => $email)));
    }
  }

  $invited_users_output = '';
  if ($invited_users) {
    foreach ($invited_users as $invited_user) {
      $invited_users_output .= $invited_user->mail . ' ' . url('user/' . $invited_user->uid, array('absolute' => TRUE)) . "\n";
    }
  } else {
    $invited_users_output = 'No users were invited';
  }

  $pending_users_output = '';
  if ($pending_users) {
    foreach ($pending_users as $pending_user) {
      $pending_users_output .= $pending_user->realname . ' ' .
                               $pending_user->mail . ' ' .
                               url('user/' . $pending_user->uid, array('absolute' => TRUE)) . ' ' .
                               'View Work Groups: ' . url('admin/user-work-groups', array('absolute' => TRUE, 'query' => array('mail' => $pending_user->mail))) . "\n";
    }
  } else {
    $pending_users_output = 'No pending users to review';
  }

  rules_invoke_event('pgh_user_invite_invitations_sent', $user, $owner, $invited_users_output, $pending_users_output);

  drupal_goto('dashboard');
}


/**
* Implementation of hook_rules_event_info().
*/
function pgh_user_invite_rules_event_info() {
  return array(
    'pgh_user_invite_invitations_sent' => array(
      'group' => t('PGH User Invite'),
      'label' => t('Users were invited by a Client Admin'),
      'module' => 'pgh_user_invite',
      'variables' => array(
        'inviting_user' => array('type' => 'user', 'label' => t('The user who sent the invites.')),
        'business_unit' => array('type' => 'node', 'label' => t('The Business Unit.')),
        'invited_users' => array('type' => 'text', 'label' => t('List of new users who were invited.')),
        'pending_users' => array('type' => 'text', 'label' => t('List of users who need to be processed.')),
      ),
    ),
  );
}
