<?php

/**
 * @file
 * Score module.
 *
 * @author Fang Jin <fang@designhammer.com>
 */

/**
 * Implements hook_menu().
 */
function pgh_awards_score_menu() {
  $items = array();

  // Calculate one application metric scores.
  $items['admin/metric/application/%/calculate'] = array(
    'title' => 'Calculate metric score',
    'description' => 'Calculate metric score for application',
    'page callback' => 'pgh_awards_score_calculate_application_metric',
    'page arguments' => array(3),
    'access callback' => 'node_access',
    'access arguments' => array('view', 3),
    'type' => MENU_NORMAL_ITEM,
  );

  // Calculate metric score for one application type.
  $items['admin/metric/apptype/%/calculate'] = array(
    'title' => 'Calculate metric score',
    'description' => 'Calculate metric score for application type',
    'page callback' => 'pgh_awards_score_calculate_apptype_metric',
    'page arguments' => array(3),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

  // Calculate category score for one application type.
  $items['admin/score/application/%/calculate'] = array(
    'title' => 'Calculate category score',
    'description' => 'Calculate all score for application category',
    'page callback' => 'pgh_awards_score_calculate_application',
    'page arguments' => array(3),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
  );

  return $items;
}

/**
 * Calculate score for each application of application type.
 *
 * @author Fang Jin <fang@designhammer.com>
 */
function pgh_awards_score_calculate_apptype_metric($apptype) {
  // Find all applicaiton in this apptype.
  $aids = pgh_api_find_nodes(
    array(
      'type' => 'application',
      'field_application_type' => $apptype
    ),
    NULL,
    TRUE
  );
  foreach ($aids as $aid) {
    pgh_awards_score_calculate_application_metric($aid, $apptype, FALSE);
  }
  drupal_goto();
}

/**
 * Calculate score for each category of application.
 *
 * @author Fang Jin <fang@designhammer.com>
 */
function pgh_awards_score_calculate_application_metric($app_id, $apptype = 'partner_for_change', $goto = TRUE) {
  // Find application type.
  $atid = pgh_api_find_nodes(
    array(
      'type' => 'apptype',
      'title' => $apptype,
    )
  );
  $app_type = node_load($atid);
  $awrapper = entity_metadata_wrapper('node', $app_type);
  $cids = $awrapper->field_apptype_categories->raw();

  foreach ($cids as $cid) {
    // Find all metrics for each.
    $mids = pgh_api_find_nodes(
      array(
        'type' => 'metric',
        'field_metric_category' => array('target_id', $cid, '=')
      ),
      array('created' => 'ASC'),
      TRUE
    );

    foreach ($mids as $mid) {
      // Calculate value.
      $metric_value = pgh_awards_score_calculate_metric($app_id, $mid);

      // Find metric response object.
      if ($mrid = pgh_api_find_nodes(
        array(
          'type' => 'metric_response',
          'field_metric_response_app' => array('target_id', $app_id , '='),
          'field_metric_response_metric' => array('target_id', $mid , '='),
        )
      )) {
        $response = node_load($mrid);
        $wrapper = entity_metadata_wrapper('node', $response);
      }
      else {
        // Create a new metric response.
        $response = entity_create('node', array('type' => 'metric_response'));
        $wrapper = entity_metadata_wrapper('node', $response);
        $wrapper->field_metric_response_app->set($app_id);
        $wrapper->field_metric_response_metric->set($mid);
      }

      // Store response object.
      $wrapper->title = 'app_' . $app_id . '_m_' . $mid;
      $wrapper->field_metric_response_value->set($metric_value['value']);
      $wrapper->field_metric_response_score->set($metric_value['score']);

      $wrapper->save();
    }
  }
  if ($goto) {
    drupal_goto();
  }
}

/**
 * Calculate the metric score.
 *
 * @author Fang Jin <fang@designhammer.com>
 */
function pgh_awards_score_calculate_metric($app_id, $metric_id) {
  $value = 0; $score = 0;

  $node = node_load($metric_id);
  $wrapper = entity_metadata_wrapper('node', $node);
  $formula = $wrapper->field_metric_formula->value();
  $reference = $wrapper->field_metric_reference->value();
  $orientation = $wrapper->field_metric_orientation->value();
  // $formula = 'pghq_PFC_waste_10_1_tG_3 + pghq_PFC_demographic_1_7';

  // Pattern match the formula to find all variables with pghq_ prefix.
  $matches = array();
  if (preg_match_all('/\bpghq_[\w]*/', $formula, $matches)) {
    if (!empty($matches[0])) {
      $variables = array();
      foreach ($matches[0] as $match) {
        $qid = pgh_api_find_nodes(
          array(
            'type' => 'question',
            'title' => $match,
          )
        );
        if ($qid && !isset($variables[$match])) {
          $response = pgh_api_get_response($app_id, $qid);
          $value = !empty($response['value']) ? $response['value'] : '0';
          // Convert anything into a string, https://bugs.php.net/bug.php?id=39579.
          $value = "'" . $value . "'";
          $variables[$match] = array(
            'question' => $match,
            'value' => $value,
          );
        }
      }
      // Evaluate the formula.
      $replace = $formula;
      foreach ($variables as $variable) {
        $replace = str_replace($variable['question'], $variable['value'], $replace);
      }
      // Suppress error for now.
      try {
        $value = eval("return @($replace);");
      }
      catch (Exception $e) {
        dsm($e->getMessage());
      }
      // Calculate score.
      $score = intval($value / $reference * 100);
      if ($orientation == 'low') {
        $score = 100 - $score;
      }
      // Bound score.
      if ($score < 0) {
        $score = 0;
      }
      if ($score > 100) {
        $score = 100;
      }

      $value = intval($value);
    }
  }

  return array(
    'value' => $value,
    'score' => $score
  );
}


/**
 * Hook views_pre_render.
 */
function pgh_awards_score_views_pre_render(&$view) {
  // Add calculate button for now.
  if ($view->name == 'metric_score') {
    $app_id = arg(3);
    $items = array();
    $items[] = l(
      t('Calculate'),
      "admin/metric/application/$app_id/calculate",
      array('query' => drupal_get_destination())
    );
    $view->attachment_before = theme('item_list', array(
      'items' => $items,
      'attributes' => array('class' => 'action-links')
    ));
  }
  if ($view->name == 'metric_score_for_apptype') {
    $apptype = arg(3);
    $items = array();
    $items[] = l(
      t('Calculate'),
      "admin/metric/apptype/$apptype/calculate",
      array('query' => drupal_get_destination())
    );
    $view->attachment_before = theme('item_list', array(
      'items' => $items,
      'attributes' => array('class' => 'action-links')
    ));

  }
}

/**
 * Calculate score for category and store in category response.
 *
 * @param int $app_id
 *   Application node id
 *
 * @param int $cat_id
 *   Category node id
 *
 * @param bool $save
 *   If score should be saved
 * 
 * @return mixed 
 *   Array of scores
 *
 * @author Fang Jin <fang@designhammer.com>
 */
function pgh_awards_score_calculate_application_category($app_id, $cat_id, $save = TRUE) {
  $scores = array(
    'automatic_p' => 0,
    'automatic' => 0,
    'kpi_p' => 0,
    'kpi' => 0,
    'question_count' => 0
  );
  $category = node_load($cat_id);
  $category_wrapper = entity_metadata_wrapper('node', $category);
  foreach ($category_wrapper->field_category_sections->getIterator() as $section_wrapper) {
    $qids = $section_wrapper->field_section_questions->raw();

    // Find all response id associated with these questions.
    $rids = pgh_api_find_nodes(
      array(
        'type' => 'response',
        'field_response_application' => array('target_id', $app_id, '='),
        'field_response_question' => array('target_id', $qids, 'IN'),
      ),
      NULL, TRUE
    );

    // Aggregate the scores.
    $responses = node_load_multiple($rids);
    foreach ($responses as &$response) {
      $response_wrapper = entity_metadata_wrapper('node', $response);
      // Calculate automatic scores.
      $scores['automatic_p'] += intval($response_wrapper->field_response_point->value());
      $scores['automatic'] += intval($response_wrapper->field_response_score->value());
      // Calculate kpi scores.
      $kpi = $response_wrapper->field_response_kpi->value();
      if ($kpi !== '') {
        $scores['kpi_p'] += 1;
        $scores['kpi'] += intval($kpi);
      }
      // Calculate other stat.
      $scores['question_count'] += 1;
    }
  }
  if ($save) {
    if ($rid = pgh_api_find_nodes(
          array(
            'type' => 'category_response',
            'field_cat_response_application' => array('target_id', $app_id, '='),
            'field_cat_response_category' => array('target_id', $cat_id, '='),
          )
    )) {
      $cat_response = node_load($rid);
      $cat_response_wrapper = entity_metadata_wrapper('node', $cat_response);
    }
    else {
      $cat_response = entity_create('node', array('type' => 'category_response'));
      $cat_response_wrapper = entity_metadata_wrapper('node', $cat_response);
      $cat_response_wrapper->field_cat_response_application->set($app_id);
      $cat_response_wrapper->field_cat_response_category->set($cat_id);
      $cat_response_wrapper->title->set('app_' . $app_id . '_' . $category_wrapper->title->value() .  '_' . $cat_id);
    }
    $cat_response_wrapper->field_cat_response_automatic_p->set($scores['automatic_p']);
    $cat_response_wrapper->field_cat_response_automatic->set($scores['automatic']);
    $cat_response_wrapper->field_cat_response_kpi_p->set($scores['kpi_p']);
    $cat_response_wrapper->field_cat_response_kpi->set($scores['kpi']);
    $cat_response_wrapper->save();
  }

  return $scores;
}

/**
 * Calculate score for application.
 *
 * @param int $app_id
 *   Application node id
 *
 * @param bool $save
 *   If score should be saved
 * 
 * @return mixed 
 *   Array of scores
 *
 * @author Fang Jin <fang@designhammer.com>
 */
function pgh_awards_score_calculate_application($app_id, $save = TRUE) {
  $app = node_load($app_id);

  // Find app type.
  $apptype_tag = $app->field_application_type['und'][0]['value'];
  $apptype_id = pgh_api_find_nodes(array('type' => 'apptype', 'title' => $apptype_tag));
  $apptype = node_load($apptype_id);
  $apptype_wrapper = entity_metadata_wrapper('node', $apptype);

  // Find all categories.
  $sums = array(
    'automatic_p' => 0,
    'automatic' => 0,
    'kpi_p' => 0,
    'kpi' => 0,
    'question_count' => 0
  );
  $cids = $apptype_wrapper->field_apptype_categories->raw();
  foreach ($cids as $cid) {
    $scores = pgh_awards_score_calculate_application_category($app_id, $cid, $save);

    foreach ($scores as $key => $score) {
      $sums[$key] += $score;
    }
  }

  return $sums;
}
