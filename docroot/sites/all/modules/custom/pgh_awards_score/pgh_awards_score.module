<?php

/**
 * @file
 * Score module.
 *
 * @author Fang Jin <fang@designhammer.com>
 */

/**
 * Implements hook_menu().
 */
function pgh_awards_score_menu() {
  $items = array();

  // Calculate category score for one application.
  $items['admin/score/application/%/calculate'] = array(
    'title' => 'Calculate category score',
    'description' => 'Calculate all score for application category',
    'page callback' => 'pgh_awards_score_calculate_application_page',
    'page arguments' => array(3),
    'access arguments' => array('administer awards system'),
  );

  // Calculate all scores for one application type.
  $items['admin/score/apptype/%/calculate'] = array(
    'title' => 'Calculate scores for application type',
    'description' => 'Calculate scores for application type',
    'page callback' => 'drupal_get_form',
    'page arguments' => array("pgh_awards_score_calculate_apptype_form", 3),
    'access arguments' => array('administer awards system'),
  );

  return $items;
}

/**
 * Calculate score for each category of application.
 *
 * Currently this function is retired. Waiting for merged into drush script
 *
 * @author Fang Jin <fang@designhammer.com>
 */
function pgh_awards_score_calculate_application_metric_page($app_id, $apptype = 'partner_for_change', $goto = TRUE) {
  // Find application type.
  $atid = pgh_api_find_nodes(
    array(
      'type' => 'apptype',
      'title' => $apptype,
    )
  );
  $app_type = node_load($atid);
  $awrapper = entity_metadata_wrapper('node', $app_type);
  $cids = $awrapper->field_apptype_categories->raw();

  foreach ($cids as $cid) {
    // Find all metrics for each.
    $mids = pgh_api_find_nodes(
      array(
        'type' => 'metric',
        'field_metric_category' => array('target_id', $cid, '=')
      ),
      array('created' => 'ASC'),
      TRUE
    );

    foreach ($mids as $mid) {
      // Calculate value.
      $metric_value = pgh_awards_score_calculate_metric($app_id, $mid);

      // Find metric response object.
      if ($mrid = pgh_api_find_nodes(
        array(
          'type' => 'metric_response',
          'field_metric_response_app' => array('target_id', $app_id , '='),
          'field_metric_response_metric' => array('target_id', $mid , '='),
        )
      )) {
        $response = node_load($mrid);
        $wrapper = entity_metadata_wrapper('node', $response);
      }
      else {
        // Create a new metric response.
        $response = entity_create('node', array('type' => 'metric_response'));
        $wrapper = entity_metadata_wrapper('node', $response);
        $wrapper->field_metric_response_app->set($app_id);
        $wrapper->field_metric_response_metric->set($mid);
      }

      // Store response object.
      $wrapper->title = 'app_' . $app_id . '_m_' . $mid;
      $wrapper->field_metric_response_value->set($metric_value['value']);
      $wrapper->field_metric_response_score->set($metric_value['score']);

      $wrapper->save();
    }
  }
  if ($goto) {
    drupal_goto();
  }
}

/**
 * Hook views_pre_render.
 */
function pgh_awards_score_views_pre_render(&$view) {
  // Add calculate button for now.
  if ($view->name == 'metric_score') {
    $app_id = arg(3);
    $items = array();
    $items[] = l(
      t('Calculate'),
      "admin/score/application/$app_id/calculate",
      array('query' => drupal_get_destination())
    );
    $view->attachment_before = theme('item_list', array(
      'items' => $items,
      'attributes' => array('class' => 'action-links')
    ));
  }
  if ($view->name == 'score_application') {
    $app_id = arg(3);
    $items = array();
    $items[] = l(
      t('Calculate'),
      "admin/score/application/$app_id/calculate",
      array('query' => drupal_get_destination())
    );
    $view->attachment_before = theme('item_list', array(
      'items' => $items,
      'attributes' => array('class' => 'action-links')
    ));
  }
}

/**
 * Calculate the metric score.
 *
 * @param int $app_id
 *   Application node id
 *
 * @param int $metric_id
 *   Metric node id
 *
 * @return mixed 
 *   Array of scores
 *
 * @author Fang Jin <fang@designhammer.com>
 */
function pgh_awards_score_calculate_metric($app_id, $metric_id) {
  $value = 0; $score = 0;

  $node = node_load($metric_id);
  $wrapper = entity_metadata_wrapper('node', $node);
  $formula = $wrapper->field_metric_formula->value();
  $reference = $wrapper->field_metric_reference->value();
  $orientation = $wrapper->field_metric_orientation->value();
  // $formula = 'pghq_PFC_waste_10_1_tG_3 + pghq_PFC_demographic_1_7';

  // Pattern match the formula to find all variables with pghq_ prefix.
  $matches = array();
  if (preg_match_all('/\bpghq_[\w]*/', $formula, $matches)) {
    if (!empty($matches[0])) {
      $variables = array();
      foreach ($matches[0] as $match) {
        $qid = pgh_api_find_nodes(
          array(
            'type' => 'question',
            'title' => $match,
          )
        );
        if ($qid && !isset($variables[$match])) {
          $response = pgh_api_get_response($app_id, $qid);
          $value = !empty($response['value']) ? $response['value'] : '0';
          // Convert anything into a string, https://bugs.php.net/bug.php?id=39579.
          $value = "'" . $value . "'";
          $variables[$match] = array(
            'question' => $match,
            'value' => $value,
          );
        }
      }
      // Sort variables by variable length.
      uksort($variables, create_function('$a,$b', 'return strlen($a) < strlen($b);'));

      // Evaluate the formula.
      $replace = $formula;
      foreach ($variables as $variable) {
        $replace = str_replace($variable['question'], $variable['value'], $replace);
      }
      // Suppress error for now.
      try {
        $value = eval("return @($replace);");
      }
      catch (Exception $e) {
        // Can't catch this error for now, needs better solution, ex. writing script to file.
        watchdog('pgh_score', 'Error in eval on %var', array('%var' => $replace), WATCHDOG_ERROR);
      }
      // Calculate score.
      $score = round($value / $reference * 100, 2);
      $value = round($value, 2);
      if ($orientation == 'low') {
        $score = 100.0 - $score;
      }
      // Bound score.
      if ($score < 0) {
        $score = 0.0;
      }
      if ($score > 100) {
        $score = 100.0;
      }

    }
  }

  return array(
    'metric_id' => $metric_id,
    'value' => $value,
    'score' => $score
  );
}

/**
 * Calculate metric score for specific category of specific application.
 *
 * @param int $app_id
 *   Application node id
 *
 * @param int $cat_id
 *   Category node id
 *
 * @param bool $save
 *   If score should be saved
 * 
 * @return mixed 
 *   Array of scores
 *
 * @author Fang Jin <fang@designhammer.com>
 */
function pgh_awards_score_calculate_application_category_metric($app_id, $cat_id, $save = TRUE) {
  // Find all metrics for each category.
  $mids = pgh_api_find_nodes(
    array(
      'type' => 'metric',
      // Missing application type.
      'field_metric_category' => array('target_id', $cat_id, '=')
    ),
    array('created' => 'ASC'),
    TRUE
  );
  $metric_values = array(
    'metric_p' => 0,
    'metric' => 0,
    'metric_count' => 0,
  );
  // For each metric.
  foreach ($mids as $mid) {
    // Calculate value.
    $metric_value = pgh_awards_score_calculate_metric($app_id, $mid);

    // Save to metric response.
    if ($save) {
      // Find metric response object.
      if ($mrid = pgh_api_find_nodes(
        array(
          'type' => 'metric_response',
          'field_metric_response_app' => array('target_id', $app_id , '='),
          'field_metric_response_metric' => array('target_id', $mid , '='),
        )
      )) {
        $response = node_load($mrid);
        $wrapper = entity_metadata_wrapper('node', $response);
      }
      else {
        // Create a new metric response.
        $response = entity_create('node', array('type' => 'metric_response'));
        $wrapper = entity_metadata_wrapper('node', $response);
        $wrapper->field_metric_response_app->set($app_id);
        $wrapper->field_metric_response_metric->set($mid);
      }

      // Store response object.
      $wrapper->title = 'app_' . $app_id . '_m_' . $mid;
      $wrapper->field_metric_response_value->set($metric_value['value']);
      $wrapper->field_metric_response_score->set($metric_value['score']);

      $wrapper->save();
    }

    // $metric_values['point'] += $metric_value['point'];
    $metric_values['metric'] += $metric_value['score'];
    $metric_values['metric_count'] += 1;
  }
  return $metric_values;
}

/**
 * Calculate score for category and store in category response.
 *
 * @param int $app_id
 *   Application node id
 *
 * @param int $cat_id
 *   Category node id
 *
 * @param bool $save
 *   If score should be saved
 * 
 * @return mixed 
 *   Array of scores
 *
 * @author Fang Jin <fang@designhammer.com>
 */
function pgh_awards_score_calculate_application_category($app_id, $cat_id, $save = TRUE) {
  $scores = array(
    'automatic_p' => 0,
    'automatic' => 0,
    'kpi_p' => 0,
    'kpi' => 0,
    'metric_p' => 0,
    'metric' => 0,
    'quality_p' => 0,
    'quality' => 0,
    'question_count' => 0,
    'metric_count' => 0,
  );

  // Aggregate automatic and kpi scores.
  $category = node_load($cat_id);
  $category_wrapper = entity_metadata_wrapper('node', $category);
  foreach ($category_wrapper->field_category_sections->getIterator() as $section_wrapper) {
    $qids = $section_wrapper->field_section_questions->raw();

    // Find all response id associated with these questions.
    $rids = pgh_api_find_nodes(
      array(
        'type' => 'response',
        'field_response_application' => array('target_id', $app_id, '='),
        'field_response_question' => array('target_id', $qids, 'IN'),
      ),
      NULL, TRUE
    );

    // Aggregate the scores.
    $responses = node_load_multiple($rids);
    foreach ($responses as &$response) {
      $response_wrapper = entity_metadata_wrapper('node', $response);
      // Calculate automatic scores.
      $scores['automatic_p'] += intval($response_wrapper->field_response_point->value());
      $scores['automatic'] += intval($response_wrapper->field_response_score->value());
      // Calculate kpi scores.
      $kpi = $response_wrapper->field_response_kpi->value();
      if ($kpi !== '') {
        $scores['kpi_p'] += 1;
        $scores['kpi'] += intval($kpi);
      }
      // Calculate other stat.
      $scores['question_count'] += 1;
    }
  }

  // Aggregate metric scores.
  $metric_scores = pgh_awards_score_calculate_application_category_metric($app_id, $cat_id, $save);
  $scores = array_merge($scores, $metric_scores);
  $scores['metric_p'] = $scores['metric_count'] * 100;

  return $scores;
}

/**
 * Calculate score for application.
 *
 * @param int $app_id
 *   Application node id
 *
 * @param bool $save
 *   If score should be saved
 * 
 * @return mixed 
 *   Array of scores
 *
 * @author Fang Jin <fang@designhammer.com>
 */
function pgh_awards_score_calculate_application($app_id, $save = TRUE) {
  // Find all categories.
  $sums = array(
    'automatic_p' => 0,
    'automatic' => 0,
    'kpi_p' => 0,
    'kpi' => 0,
    'metric_p' => 0,
    'metric' => 0,
    'quality' => 0,
    'quality_p' => 0,
    'question_count' => 0,
    'metric_count' => 0,
    'final' => 0,
  );
  if ($app = node_load($app_id)) {
    // Find app type.
    $apptype_tag = $app->field_application_type['und'][0]['value'];
    $apptype_id = pgh_api_find_nodes(array('type' => 'apptype', 'title' => $apptype_tag));
    $apptype = node_load($apptype_id);
    $apptype_wrapper = entity_metadata_wrapper('node', $apptype);
    $quality_disable_cids = pgh_awards_score_quality_potential_categories($apptype_tag);

    $cids = $apptype_wrapper->field_apptype_categories->raw();
    foreach ($cids as $cat_id) {
      $scores = pgh_awards_score_calculate_application_category($app_id, $cat_id, $save);

      // Save to category response.
      if ($save) {
        if ($rid = pgh_api_find_nodes(
          array(
            'type' => 'category_response',
            'field_cat_response_application' => array('target_id', $app_id, '='),
            'field_cat_response_category' => array('target_id', $cat_id, '='),
          )
        )) {
          $cat_response = node_load($rid);
          $cat_response_wrapper = entity_metadata_wrapper('node', $cat_response);
        }
        else {
          $cat_response = entity_create('node', array('type' => 'category_response'));
          $cat_response_wrapper = entity_metadata_wrapper('node', $cat_response);
          $cat_response_wrapper->field_cat_response_application->set($app_id);
          $cat_response_wrapper->field_cat_response_category->set($cat_id);
          $cat_response_wrapper->title->set('app_' . $app_id . '_cat_' . $cat_id);
        }
        $cat_response_wrapper->field_cat_response_automatic_p->set($scores['automatic_p']);
        $cat_response_wrapper->field_cat_response_automatic->set($scores['automatic']);
        $cat_response_wrapper->field_cat_response_kpi_p->set($scores['kpi_p']);
        $cat_response_wrapper->field_cat_response_kpi->set($scores['kpi']);
        $cat_response_wrapper->field_cat_response_metric_p->set($scores['metric_p']);
        $cat_response_wrapper->field_cat_response_metric->set($scores['metric']);

        // Based on the application type, hidden tag is stored as 0 here.
        $quality_p = in_array($cat_id, $quality_disable_cids) ? 0 : 100;
        $cat_response_wrapper->field_cat_response_quality_p->set($quality_p);

        // Calculate and store final score.
        $weight = $apptype_wrapper->field_apptype_score_weights->value();
        $wp = explode('|', $weight);
        if (count($wp) < 4) {
          $wp = array(1, 1, 1, 1);
        }
        $scores['final'] = round($wp[0] * $scores['automatic'] + $wp[1] * $scores['kpi'] + $wp[2] * $scores['metric'] + $wp[3] * $scores['quality'], 2);
        $cat_response_wrapper->field_cat_response_final->set($scores['final']);

        $cat_response_wrapper->save();
      }

      foreach ($scores as $key => $score) {
        $sums[$key] += $score;
      }
    }

    // Save to application.
    if ($save) {
      $app_wrapper = entity_metadata_wrapper('node', $app);

      $app_wrapper->field_application_automatic_p->set($sums['automatic_p']);
      $app_wrapper->field_application_automatic->set($sums['automatic']);
      $app_wrapper->field_application_kpi_p->set($sums['kpi_p']);
      $app_wrapper->field_application_kpi->set($sums['kpi']);
      $app_wrapper->field_application_metric_p->set($sums['metric_p']);
      $app_wrapper->field_application_metric->set($sums['metric']);
      $app_wrapper->field_application_quality_p->set($sums['quality_p']);
      $app_wrapper->field_application_quality->set($sums['quality']);
      $app_wrapper->field_application_final->set($sums['final']);

      $app_wrapper->save();
    }
  }

  return $sums;
}

/**
 * Page for calculation of scores for application.
 *
 * This page will redirect to previous submitted page,
 * it's usually associated with a button or link.
 */
function pgh_awards_score_calculate_application_page($app_id) {
  pgh_awards_score_calculate_application($app_id, TRUE);
  drupal_set_message('Score has been calculated for application: ' . $app_id);
  drupal_goto();
}

/**
 * Get all score for application.
 *
 * @param int $app_id
 *   The NID of application
 *
 * @return mixed
 *   The array info with all category scores.
 *
 * @author Fang Jin <fang@designhammer.com>
 */
function pgh_awards_score_application($app_id, $include_metric = FALSE) {
  $app = node_load($app_id);
  $app_wrapper = entity_metadata_wrapper('node', $app);

  // Find app type.
  $apptype_tag = $app_wrapper->field_application_type->raw();
  $apptype_id = pgh_api_find_nodes(array('type' => 'apptype', 'title' => $apptype_tag));
  $apptype = node_load($apptype_id);
  $apptype_wrapper = entity_metadata_wrapper('node', $apptype);

  // Get available categories.
  $cat_ids = $apptype_wrapper->field_apptype_categories->raw();

  // Get all category responses.
  $responses = array();
  $cat_response_ids = pgh_api_find_nodes(
    array(
      'type' => 'category_response',
      'field_cat_response_application' => array('target_id', $app->nid, '='),
    ),
    NULL,
    TRUE
  );
  foreach ($cat_response_ids as $crid) {
    $cat_response = node_load($crid);
    $cat_response_wrapper = entity_metadata_wrapper('node', $cat_response);
    $cid = $cat_response_wrapper->field_cat_response_category->raw();
    $body = $cat_response_wrapper->body->value();

    $responses['cat_' . $cid] = array(
      'category_id' => $cid,
      'response_id' => $crid,
      'final' => $cat_response_wrapper->field_cat_response_final->value(),
      'automatic_p' => $cat_response_wrapper->field_cat_response_automatic_p->value(),
      'automatic' => $cat_response_wrapper->field_cat_response_automatic->value(),
      'kpi_p' => $cat_response_wrapper->field_cat_response_kpi_p->value(),
      'kpi' => $cat_response_wrapper->field_cat_response_kpi->value(),
      'metric_p' => $cat_response_wrapper->field_cat_response_metric_p->value(),
      'metric' => $cat_response_wrapper->field_cat_response_metric->value(),
      'quality_p' => $cat_response_wrapper->field_cat_response_quality_p->value(),
      'quality' => $cat_response_wrapper->field_cat_response_quality->value(),
      'comment' => !empty($body['value']) ? $body['value'] : '',
      'case_study' => $cat_response_wrapper->field_cat_response_case_study->value(),
    );
  }
  // Get all metric responses.
  if ($include_metric) {
    $metrics = array();
    $metric_response_ids = pgh_api_find_nodes(
      array(
        'type' => 'metric_response',
        'field_metric_response_app' => array('target_id', $app->nid, '='),
      ),
      NULL,
      TRUE
    );

    foreach ($metric_response_ids as $mrid) {
      $metric_response = node_load($mrid);
      $metric_response_wrapper = entity_metadata_wrapper('node', $metric_response);
      $metric_id = $metric_response_wrapper->field_metric_response_metric->raw();
      $metric = node_load($metric_id);
      $metric_wrapper = entity_metadata_wrapper('node', $metric);
      $cid = $metric_wrapper->field_metric_category->raw();
      $body = $metric_wrapper->body->value();

      $responses['cat_' . $cid]['metrics'][] = array(
        'metric_response_id' => $mrid,
        'category_id' => $cid,
        'description' => !empty($body) ? $body['value'] : '',
        'formula' => $metric_wrapper->field_metric_formula->value(),
        'value' => $metric_response_wrapper->field_metric_response_value->value(),
        'score' => $metric_response_wrapper->field_metric_response_score->value(),
      );
    }
  }

  // Assemble the final category scores.
  $scores = array();
  foreach ($cat_ids as $cid) {
    $score_item = array();

    if (!empty($responses['cat_' . $cid])) {
      $score_item = array_merge($responses['cat_' . $cid], $score_item);
    }

    $scores[] = $score_item;
  }

  return $scores;
}

/**
 * Calculate score for app type confirm page.
 */
function pgh_awards_score_calculate_apptype_form($form, &$form_state, $apptype_tag) {
  $form['description'] = array(
    '#markup' => 'This will take a few minutes to calculate scores for all applications of this application type, proceed ? <br />',
  );
  $atids = pgh_api_find_nodes(
    array(
      'type' => 'apptype',
    ),
    NULL, TRUE
  );
  $apptypes = node_load_multiple($atids);
  $options = array();
  foreach ($apptypes as &$apptype) {
    $options[$apptype->title] = $apptype->body['und'][0]['value'];
  }
  $form['apptype'] = array(
    '#type' => 'select',
    '#title' => 'Choose application type',
    '#options' => $options,
    '#default_value' => $apptype_tag,
  );

  $types = array(
    'automatic' => t('Automatic'),
    'kpi' => t('KPI'),
    'metric' => t('Metric'),
    'quality' => t('Quality'),
  );
  $form['scores'] = array(
    '#type' => 'checkboxes',
    '#title' => 'Choose score types',
    '#options' => $types,
    '#default_value' => array_keys($types),
  );

  $form['all'] = array(
    '#type' => 'checkbox',
    '#title' => 'Process all',
    '#description' => 'Check this if you are sure you want to calculate all the scores',
    '#default_value' => 0,
  );
  $form['debug'] = array(
    '#type' => 'textfield',
    '#title' => '[Debug] Set how many applications to process',
    '#default_value' => 1,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Calculate',
  );

  return $form;
}

/**
 * Submit handler for calculation.
 */
function pgh_awards_score_calculate_apptype_form_submit($form, &$form_state) {
  $values = &$form_state['values'];
  $apptype_tag = $values['apptype'];

  // Find out all applications of this application type.
  $app_ids = pgh_api_find_nodes(
    array(
      'type' => 'application',
      'field_application_type' => $apptype_tag,
    ),
    NULL, TRUE
  );

  $operations = array();
  $debug = 0;
  if (empty($values['all'])) {
    if (isset($values['debug'])) {
      $debug = intval($values['debug']);
    }
  }
  $i = 0;
  foreach ($app_ids as $nid) {
    $operations[] = array('pgh_awards_score_calculate_apptype_op', array($nid));
    if ($debug) {
      $i += 1;
      if ($i >= $debug) {
        break;
      }
    }
  }
  $batch = array(
    'operations' => $operations,
    'finished' => 'pgh_awards_score_calculate_apptype_form_finished',
  );
  batch_set($batch);
}

/**
 * Finish handler for calculation.
 */
function pgh_awards_score_calculate_apptype_form_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('@count applications calculated.', array('@count' => count($results))));
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    drupal_set_message(t('An error occurred while processing id: @args',
      array('@args' => print_r($error_operation[0], TRUE))));
  }
}

/**
 * Op handler for calculation.
 */
function pgh_awards_score_calculate_apptype_op($app_id, &$context) {
  pgh_awards_score_calculate_application($app_id, TRUE);

  $context['results'][] = $app_id;
  $context['message'] = t('Calculating application "@nid"', array('@nid' => $app_id));
}

/**
 * Get a list of displayable categories id based on application type.
 *
 * @param string $apptype_tag
 *   Application Type Tag String
 *
 * @author Fang Jin <fang@designhammer.com>
 */
function pgh_awards_score_quality_potential_categories($apptype_tag) {
  $hiddens = array(
    'partner_for_change' => array(
      'PFC_demographic',
      'PFC_goals',
      'PFC_accuracy',
      'PFC_appendixA',
      'PFC_appendixB'
    ),
    'partner_recognition' => array(
      'PR_demographic',
      'PFC_goals',
      'PR_accuracy',
      'PR_appendixA',
      'PR_appendixB'
    ),
    'long_term_care' => array(
      'LTC_demographic',
      'PFC_goals',
      'LTC_accuracy',
      'LTC_appendixA',
      'LTC_appendixB'
    ),
    'champion_for_change_gpo' => array(
      'CFC_goals',
      'PFC_accuracy',
    ),
    'champion_for_change_nongpo' => array(
      'CFC_goals',
      'PFC_accuracy'
    ),
    'greening_the_or' => array(
      'PFC_goals',
      'PFC_accuracy'
    ),
    'dehp_free' => array(
      'PFC_accuracy'
    ),
    'system_for_change' => array(
      'PFC_goals',
      'PFC_accuracy'
    ),
    'mmmf' => array(
      'PFC_goals',
      'PFC_accuracy'
    ),
    'chc_partner_for_change' => array(
      'CHCPFC_demographic',
      'PFC_goals',
      'CHCPFC_accuracy',
      'CHCPFC_appendixA',
      'CHCPFC_appendixB'
    ),
    'chc_partner_recognition' => array(
      'CHCPR_demographic',
      'PFC_goals',
      'CHCPR_accuracy',
      'CHCPR_appendixA',
      'CHCPR_appendixB'
    )
  );

  if (!empty($hiddens[$apptype_tag])) {
    $cids = pgh_api_find_nodes(
      array(
        'type' => 'category',
        'title' => array($hiddens[$apptype_tag], 'IN')
      ),
      NULL, TRUE
    );

    return $cids;
  }

  return array();
}
