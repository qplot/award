<?php

/**
 * @file
 * Score module.
 *
 * @author Fang Jin <fang@designhammer.com>
 */

/**
 * Implements hook_menu().
 */
function pgh_awards_score_menu() {
  $items = array();

  // $items['score/calculate'] = array(
  //   'title' => 'Calculate metric score',
  //   'description' => 'Calculate metric score',
  //   'page callback' => 'pgh_awards_score_calculate',
  //   'access callback' => TRUE,
  //   // 'access callback' => 'pgh_dashboard_redirect_access',
  //   // 'access arguments' => array(1),
  //   'type' => MENU_LOCAL_TASK,
  // );

  // calculate one application metric scores.
  $items['admin/metric/application/%/calculate'] = array(
    'title' => 'Calculate metric score',
    'description' => 'Calculate metric score for application',
    'page callback' => 'pgh_awards_score_calculate_application_metric',
    'page arguments' => array(3),
    'access callback' => 'node_access',
    'access arguments' => array('view', 3),
    'type' => MENU_NORMAL_ITEM,
  );  

  // calculate metric score for one application type
  $items['admin/metric/apptype/%/calculate'] = array(
    'title' => 'Calculate metric score',
    'description' => 'Calculate metric score for application type',
    'page callback' => 'pgh_awards_score_calculate_apptype_metric',
    'page arguments' => array(3),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );  

  return $items;
}

/**
 * Calculate score for each application of application type.
 *
 * @author Fang Jin <fang@designhammer.com>
 */
function pgh_awards_score_calculate_apptype_metric($apptype) {
  // find all applicaiton in this apptype 
  $aids = pgh_api_find_nodes(
    array(
      'type' => 'application',
      'field_application_type' => $apptype
    ),
    NULL,
    TRUE
  );
  foreach ($aids as $aid) {
    pgh_awards_score_calculate_application_metric($aid, $apptype, FALSE);
  }
  drupal_goto();
}

/**
 * Calculate score for each category of application.
 *
 * @author Fang Jin <fang@designhammer.com>
 */
function pgh_awards_score_calculate_application_metric($app_id, $apptype = 'partner_for_change', $goto = TRUE) {
  // find application type
  $atid = pgh_api_find_nodes(
    array(
      'type' => 'apptype',
      'title' => $apptype,
    )
  );
  $app_type = node_load($atid);
  $awrapper = entity_metadata_wrapper('node', $app_type);
  $cids = $awrapper->field_apptype_categories->raw();

  foreach ($cids as $cid) {
    // find all metrics for each 
    $mids = pgh_api_find_nodes(
      array(
        'type' => 'metric',
        'field_metric_category' => array('target_id', $cid, '=')
      ),
      array('created' => 'ASC'),
      TRUE
    );

    foreach ($mids as $mid) {
      // calculate value
      $metric_value = pgh_awards_score_calculate_metric($app_id, $mid);

      // find metric response object
      if ($mrid = pgh_api_find_nodes(
        array(
          'type' => 'metric_response',
          'field_metric_response_app' => array('target_id', $app_id , '='),
          'field_metric_response_metric' => array('target_id', $mid , '='),
        )
      )) {
        $response = node_load($mrid);
        $wrapper = entity_metadata_wrapper('node', $response);
      } else {
        // Create a new metric response.
        $response = entity_create('node', array('type' => 'metric_response'));
        $wrapper = entity_metadata_wrapper('node', $response);
        $wrapper->field_metric_response_app->set($app_id);
        $wrapper->field_metric_response_metric->set($mid);
      }

      // store response object
      $wrapper->title = 'app_' . $app_id . '_m_' . $mid;
      $wrapper->field_metric_response_value->set($metric_value['value']);      
      $wrapper->field_metric_response_score->set($metric_value['score']);

      $wrapper->save();
    }
  }
  if ($goto) {
    drupal_goto();
  }
}

/**
 * Calculate the metric score.
 *
 * @author Fang Jin <fang@designhammer.com>
 */
function pgh_awards_score_calculate_metric($app_id, $metric_id) {
  $value = 0; $score =0;

  $node = node_load($metric_id);
  $wrapper = entity_metadata_wrapper('node', $node);
  $formula = $wrapper->field_metric_formula->value();
  $reference = $wrapper->field_metric_reference->value();
  $orientation = $wrapper->field_metric_orientation->value();
  // $formula = 'pghq_PFC_waste_10_1_tG_3 + pghq_PFC_demographic_1_7';

  // pattern match the formula to find all variables with pghq_ prefix.
  $matches = array();
  if (preg_match_all('/\bpghq_[\w]*/', $formula, $matches)) {
    if (!empty($matches[0])) {
      $variables = array();
      foreach ($matches[0] as $match) {
        $qid = pgh_api_find_nodes(
          array(
            'type' => 'question',
            'title' => $match,
          )
        );
        if ($qid) {
          $response = pgh_api_get_response($app_id, $qid);
          $variables[] = array(
            'question' => $match,
            'value' => !empty($response['value']) ? $response['value'] : 0,
          );
        }
      }
      // evaluate the formula.
      $replace = $formula;
      foreach ($variables as $variable) {
        $replace = str_replace($variable['question'], $variable['value'], $replace);
      }
      // suppress error for now
      try {
        $value = eval("return @($replace);");
      } catch (Exception $e) {
        dsm($e->getMessage());
      }
      // calculate score.
      $score = intval($value / $reference * 100);
      if ($orientation == 'low') {
        $score = 100 - $score;
      }
      // bound score.
      if ($score < 0) {
        $score = 0;
      }
      if ($score > 100) {
        $score = 100;
      }

      $value = intval($value);
    }
  }
  
  return array(
    'value' => $value,
    'score' => $score
  );
}


/**
 * Hook views_pre_render.
 *
 * @author Fang Jin <fang@designhammer.com>
*/
function pgh_awards_score_views_pre_render(&$view) {
  // Add calculate button for now
  if ($view->name == 'metric_score') {
    $app_id = arg(3);
    $items = array();
    $items[] = l(
      'Calculate', 
      "admin/metric/application/$app_id/calculate", 
      array('query' => drupal_get_destination())
    );
    $view->attachment_before = theme('item_list', array(
      'items' => $items, 
      'attributes' => array('class' => 'action-links')
    ));
  }
  if ($view->name == 'metric_score_for_apptype') {
    $apptype = arg(3);
    $items = array();
    $items[] = l(
      'Calculate', 
      "admin/metric/apptype/$apptype/calculate", 
      array('query' => drupal_get_destination())
    );
    $view->attachment_before = theme('item_list', array(
      'items' => $items, 
      'attributes' => array('class' => 'action-links')
    ));

  }
}

/**
 * Get all score for application.
 * 
 * @param integer $app
 *   The NID of application
 *
 * @return mixed
 *   The array info with all category scores.
 *
 * @author Fang Jin <fang@designhammer.com>
 */
function pgh_awards_score_application($app_id, $include_metric = FALSE) {
  $app = node_load($app_id);  
  $app_wrapper = entity_metadata_wrapper('node', $app);

  // Find app type.
  $apptype_tag = $app_wrapper->field_application_type->raw();
  $apptype_id = pgh_api_find_nodes(array('type' => 'apptype', 'title' => $apptype_tag));
  $apptype = node_load($apptype_id);
  $apptype_wrapper = entity_metadata_wrapper('node', $apptype);

  // Get available categories.
  $cat_ids = $apptype_wrapper->field_apptype_categories->raw();

  // Get all category responses.
  $responses = array();
  $cat_response_ids = pgh_api_find_nodes(
    array(
      'type' => 'category_response',
      // 'field_cat_response_application' => array('target_id', $app->nid, '='),
    ),
    NULL,
    TRUE
  );
  foreach ($cat_response_ids as $crid) {
    $cat_response = node_load($crid);
    $cat_response_wrapper = entity_metadata_wrapper('node', $cat_response);
    $cid = $cat_response_wrapper->field_cat_response_category->raw();
    $body = $cat_response_wrapper->body->value();
    
    $responses['cat_' . $cid] = array(
      'category_id' => $cid,
      'response_id' => $crid,
      'final' => $cat_response_wrapper->field_cat_response_final->value(),
      'automatic_p' => $cat_response_wrapper->field_cat_response_automatic_p->value(),
      'automatic' => $cat_response_wrapper->field_cat_response_automatic->value(),
      'kpi_p' => $cat_response_wrapper->field_cat_response_kpi_p->value(),
      'kpi' => $cat_response_wrapper->field_cat_response_kpi->value(),
      'metric_p' => $cat_response_wrapper->field_cat_response_metric_p->value(),
      'metric' => $cat_response_wrapper->field_cat_response_metric->value(),
      'quality_p' => $cat_response_wrapper->field_cat_response_quality_p->value(),
      'quality' => $cat_response_wrapper->field_cat_response_quality->value(),
      'comment' => !empty($body['value']) ? $body['value'] : '',
      'case_study' => $cat_response_wrapper->field_cat_response_case_study->value(),
    );
  }
  // Get all metric responses.
  if ($include_metric) {
    $metrics = array();
    $metric_response_ids = pgh_api_find_nodes(
      array(
        'type' => 'metric_response',
        // 'field_metric_response_app' => array('target_id', $app->nid, '='),
      ),
      NULL,
      TRUE
    );

    foreach ($metric_response_ids as $mrid) {
      $metric_response = node_load($mrid);
      $metric_response_wrapper = entity_metadata_wrapper('node', $metric_response);
      $metric_id = $metric_response_wrapper->field_metric_response_metric->raw();
      $metric = node_load($metric_id);
      $metric_wrapper = entity_metadata_wrapper('node', $metric);
      $cid = $metric_wrapper->field_metric_category->raw();
      $body = $metric_wrapper->body->value();

      $responses['cat_' . $cid]['metrics'][] = array(
        'metric_response_id' => $mrid,
        'category_id' => $cid,
        'description' => !empty($body) ? $body['value'] : '',
        'formula' => $metric_wrapper->field_metric_formula->value(),
        'value' => $metric_response_wrapper->field_metric_response_value->value(),
        'score' => $metric_response_wrapper->field_metric_response_score->value(),
      );       
    }
  }

  // Assemble the final category scores.
  $scores = array();
  foreach ($cat_ids as $cid) {
    $score_item = array();

    if (!empty($responses['cat_' . $cid])) {
      $score_item = array_merge($responses['cat_' . $cid], $score_item);
    }

    $scores[] = $score_item;
  }

  return $scores;
}
