<?php

/**
 * hook menu
 */
function pgh_form_menu() {
  // $items['app/forms'] = array(
  //   'title' => 'Application Form Demo',
  //   'description' => 'Demo the application page section logic',
  //   'page callback' => 'drupal_get_form',
  //   'page arguments' => array('pgh_application_form'),
  //   'access callback' => TRUE,
  // );
  $items['application/%/category/%/edit'] = array(
    'title' => 'Fill Application',
    'description' => 'Fill an application',
    'page callback' => 'pgh_application_edit_form',
    'page arguments' => array(1, 3),
    'access callback' => TRUE,
  );

  return $items;

}

/**
 * hook theme for form table
 */
function pgh_form_theme() {
  return array(
    'pgh_form_table' => array(
      'render element' => 'element'
    )
  );
}

/**
 * theme hook implementation 
 */
function theme_pgh_form_table($vars) {
  $element = $vars['element'];
  $parse = &$element['#layout'];

  // prepare to theme a table
  $rows = array();
  $i = 0;
  foreach ($parse as $row) {
    // first row is header
    if ($i == 0) {
      $header = $row;
    }
    else {
      $data = array();
      foreach ($row as $cell) {
        // check if cell is a question
        $cell_data = $cell;
        // dsm($cell);
        if (substr($cell, 0, 5) == 'pghq_') {
          // find the question 
          if ($qid = pgh_find_question_id($cell)) {
            $cell_data = render($element[$qid]);
          }
        } 
        $data[] = array('data' => $cell_data);
      }
      $rows[] = $data;
    }
    $i = $i + 1;
  }

  return theme('table', array('header' => $header, 'rows' => $rows));
}

/**
 * Fill an application form
 */
function pgh_application_edit_form($app_id, $cat_id) {
  // load the app by app_id
  if ($app = node_load($app_id)) {
    $app_wrapper = entity_metadata_wrapper('node', $app);
    $apptype = $app_wrapper->field_application_type->value();

    $type_wrapper = entity_metadata_wrapper('node', $apptype);

    // set the page title
    $title = $type_wrapper->body->value->raw();
    drupal_set_title($app_wrapper->getIdentifier() . ' - ' . 'Application: ' . $title);

    // list all categories of the app
    $lists = array();
    foreach ($type_wrapper->field_apptype_categories->getIterator() as $cat_wrapper) {
      $cat_label = $cat_wrapper->getIdentifier() . ' - ' . $cat_wrapper->body->value->raw();
      $lists[] = l($cat_label, 'application/' . $app_id . '/category/' . $cat_wrapper-> getIdentifier() . '/edit');
    };

    $out['categories'] = array(
      '#theme' => 'item_list',
      '#items' => $lists,
      '#title' => t(''),
      // '#attributes' => array('class' => array('my-links')),
    );

    // render category form
    $out['forms'] = drupal_get_form('pgh_application_form', $app_id, $cat_id);

    return drupal_render($out);

  }

  return '123';
}

/**
 * Application form
 */
function pgh_application_form($form, &$form_state, $app_id = NULL, $cat_id = NULL) {  
  $form = array();

  if (empty($app_id) || empty($cat_id)) return $form;
  // $form['name'] = array(
  //   '#type' => 'item',
  //   '#title' => t('Notes'),
  //   '#markup' => 'This is for demonstration purpose :) It lists all questions for PFC <b>application type</b> and Leadership <b>category</b>. '
  // );

  // load cateogry by name, can be id as well
  $cat = node_load($cat_id);
  $questions = array();

  if (!empty($cat->field_category_sections['und'])) {
    // for debugging purpose add a counter
    $debug = 0; $total = 5;
    foreach ($cat->field_category_sections['und'] as $sec_id) {
      if ($sec = node_load($sec_id['target_id'])) {
        $sec_wrapper = entity_metadata_wrapper('node', $sec);

        $caption = $sec_wrapper->field_section_label->value();

        // add a fieldset to hold section info
        $fieldset = 'fieldset_' . $sec_wrapper->title->value();
        $form[$fieldset] = array(
          '#type' => 'fieldset',
          '#title' => t($caption),
          '#collapsible' => TRUE,
          '#collapsed' => FALSE,
        );

        // add all question inside this section
        // $form[$fieldset] = array();
        foreach ($sec_wrapper->field_section_questions->getIterator() as $q_wrapper) {

          $major = 'question_' . $q_wrapper->label();
          
          $form[$fieldset][$major][$q_wrapper->getIdentifier()] = pgh_gen_form_question_layout($q_wrapper->value(), $app_id);

          $debug = $debug + 1;
          if ($debug == $total) break;

        }
        if ($debug == $total) break;
      }
    }
  }

  $form['submit'] = array(
    '#type' => 'submit', 
    '#value' => 'Submit',
  );

  $form['application'] = array(
    '#type' => 'hidden',
    '#value' => $app_id
  );
  // $form['questions'] = array(
  //   '#type' => 'hidden',
  //   '#value' => $questions
  // );

  return $form;
}

/**
 * Application form submit 
 */
function pgh_application_form_submit($form, &$form_state) {
  // dsm($form_state['values']);

  // since preparation have all response ready, we just need to save one by one
  $app_id = $form_state['values']['application'];

  foreach ($form_state['values'] as $qid => &$value) {

    // assume all question has number
    if (is_numeric($qid)) {
      $question = node_load($qid);
      $wrapper = entity_metadata_wrapper('node', $question);
      $type = $wrapper->field_question_type->value();
      $style = $wrapper->field_question_style->value();

      // save response if the question expects a response
      if (!in_array($type, array('html', 'container'))) {
        // assign point
        $points = $wrapper->field_question_points->value();

        $point = 0;
        switch ($type) {
          case 'text':
            if (!empty($value) && !empty($points[0]))
              $point = $points[0];
            break;
          case 'selection':
            switch ($style) {
              case 'checkboxes':
                $options = $wrapper->field_question_options->value();
                $i = 0;
                foreach ($options as $option) {
                  if (!empty($value[$option]))
                    $point += $points[$i];
                  $i = $i + 1;
                }
                $value = serialize($value);
                break;
              
              default:
                if (is_numeric($value) && is_array($points) && !empty($points[$value]))
                  $point = $points[$value];
                break;
            }
            break;
          
          default:
            # code...
            break;
        }

        $answer = array(
          'value' => $value,
          'point' => $point,
        );
        pgh_set_response($app_id, $qid, $answer);
      }
    }
  }
}

/**
 * Return form element based on question settings
 */
function pgh_gen_form_question($question, $app_id = NULL) {
  $wrapper = entity_metadata_wrapper('node', $question);
  $type = $wrapper->field_question_type->value();
  $prompt = $wrapper->field_question_prompt->value();
  $style = $wrapper->field_question_style->value();

  // prepare response for question expecting a response
  $answer = array('value' => '', 'point' => 0);
  $response_edit = '';
  $point_edit = '';
  if (!in_array($type, array('html', 'container'))) {
    $rid = pgh_get_response($app_id, $wrapper->getIdentifier(), $answer);
    if (!$rid) pgh_set_response($app_id, $wrapper->getIdentifier());
    $response_edit = '<small>' . l('[R]', 'node/' . $rid . '/edit') . '</small>';
    $point_edit = ' <small>[P' . intval($answer['point']) . ']</small> ';
  }

  $form = array();
  $question_edit = '<small>' . l('[Q]', 'node/' . $wrapper->getIdentifier() . '/edit') . '</small>';
  $form['#title'] = $prompt . ' ' .
                    $question_edit . ' ' . 
                    $response_edit . ' ' . 
                    $point_edit;

  $form['#default_value'] = $answer['value'];
  // make sure the flat return
  $form['#tree'] = False;

  // based on different question type
  switch ($type) {
    case 'html':
      $form['#markup'] = $form['#title'];
      unset($form['#title']);
      break;
    case 'container':
      $form['#markup'] = $form['#title'];
      unset($form['#title']);
      break;
    case 'text':
      $form['#type'] = 'textfield';
      $form['#size'] = NULL;
      break;
    case 'selection':
      $options = $wrapper->field_question_options->value();

      switch ($style) {
        case 'dropdown':
          $form['#type'] = 'select';
          $form['#options'] = $options;
          break;
        case 'default':
        case 'radios':
          $form['#type'] = 'radios';
          $form['#options'] = $options;
          break;
        case 'checkboxes':
          $form['#type'] = 'checkboxes';
          $form['#options'] = drupal_map_assoc($options);
          $form['#default_value'] = unserialize($form['#default_value']);
          if (empty($answer['value']))
            unset($form['#default_value']);
          break;
        default:
          $form['#markup'] = '<b><em>Not Implemented Style - '. $style . '</em></b>';
          break;
      }

      break;
    
    default:
      $form['#markup'] = '<b><em>Not Implemented Type - '. $type . '</em></b>';
      break;
  }

  return $form;
}

/**
 * Generate form questions with layout
 */
function pgh_gen_form_question_layout($question, $app_id = NULL) {
  $wrapper = entity_metadata_wrapper('node', $question);
  $type = $wrapper->field_question_type->value();
  $layout = $wrapper->field_question_layout->value();
  $prompt = $wrapper->field_question_prompt->value();

  if (!empty($layout) && ($type == 'container')) {
    // print the container parent element
    $parse = pgh_parse_layout($layout);

    // we should be able to add prompt to the prefix section
    $result = array(
      '#prefix' => $prompt,
      // '#postfix' => '',
      '#tree' => TRUE,
      '#theme' => 'pgh_form_table',
      '#layout' => $parse,
    );

    // print child elements
    foreach ($parse as $row) {
      foreach ($row as $cell) {
        if (substr($cell, 0, 5) == 'pghq_') {
          // find the question 
          if ($qid = pgh_find_question_id($cell)) {
            $child = node_load($qid);
            $result[$qid] = pgh_gen_form_question($child, $app_id);
          }
        }
      }
    }
  } else {
    // this is the original without layout handling
    $result = pgh_gen_form_question($question, $app_id);
  }

  return $result;
}

/**
 * Find question node id by question key id
 */
function pgh_find_question_id($key) {
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
                  ->propertyCondition('type', 'question')
                  ->propertyCondition('title', $key)
                  ->execute();
  if (!empty($result['node'])) {
    $keys = array_keys($result['node']);
    return $keys[0];
  }
  else
    return 0;
}

/**
 * Find response by application and question id
 */
function pgh_find_response_id($app_id, $qid) {
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
                  ->propertyCondition('type', 'response')
                  ->fieldCondition('field_response_application', 'target_id', $app_id)
                  ->fieldCondition('field_response_question', 'target_id', $qid)
                  ->execute();
  if (!empty($result['node'])) {
    $keys = array_keys($result['node']);
    return $keys[0];
  }
  else
    return 0;
}

/**
 * Load question answer,
 * return FALSE if no response is found
 */
function pgh_get_response($app_id, $qid, &$response) {
  $rid = pgh_find_response_id($app_id, $qid);
  if ($rid) {
    $response = node_load($rid); 
    $wrapper = entity_metadata_wrapper('node', $response);

    $response = array(
      'value' => $wrapper->body->value->raw(),
      'point' => $wrapper->field_response_point->value(),
    );
    return $wrapper->getIdentifier();
  }

  return 0;
}

/**
 * Set question response
 */
function pgh_set_response($app_id, $qid, $answer = array()) {
  // set default answer
  $default = array(
    'value' => '',
    'point' => 0,
  );
  $answer = array_merge($default, $answer);

  // find response
  $rid = pgh_find_response_id($app_id, $qid);
  if ($rid) {
    $response = node_load($rid);
    $wrapper = entity_metadata_wrapper('node', $response);
  } else {
    // create a new response
    $response = entity_create('node', array('type' => 'response'));
    $wrapper = entity_metadata_wrapper('node', $response);
    $wrapper->field_response_application->set($app_id);
    $wrapper->field_response_question->set($qid);
  }
  $wrapper->title = 'app_' . $app_id . '_q_' . $qid; 
  if ($answer) {
    $wrapper->body = array(
      'value' => $answer['value']
    );
    $wrapper->field_response_point->set($answer['point']);
  }
  $wrapper->save();
  node_save($response);
  return $response->nid;
}

/**
 * Parser layout string into array
 * Given a string with ; and , delimiter for rows and columns
 */
function pgh_parse_layout($str) {  
  $rows = array_map('trim', explode(";", $str));
  $result = array();
  foreach ($rows as $row) {
    $result[] = array_map('trim',explode(",",$row));
  }
  return $result;
}
