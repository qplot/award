<?php

/**
 * @file
 * Module file for PGH Form.
 * Handles displaying a form for filling out an application.
 *
 * @author Fang Jin <fang@designhammer.com>
 */

/**
 * Implements hook_menu().
 */
function pgh_form_menu() {
  $items = array();

  $items['application/%node'] = array(
    'title' => 'View application',
    'description' => 'Fill out an application',
    'page callback' => 'pgh_form_application_page',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
  );

  $items['application/%node/category/%'] = array(
    'title' => 'Fill out application',
    'description' => 'Fill out an application',
    'page callback' => 'pgh_form_category_page',
    'page arguments' => array(1, 3),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
  );

  $items['admin/config/development/pgh'] = array(
    'title' => 'PGH settings',
    'description' => 'Development settings for pgh award applicaitons',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pgh_form_settings'),
    'access callback' => TRUE,
  );

  $items['application/%node/submit'] = array(
    'title' => 'Review application for submission',
    'description' => 'Review and submit an application',
    'page callback' => 'pgh_form_application_submit_page',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
  );

  $items['question/comment/reply/%'] = array(
    'page callback' => 'pgh_form_quesiton_comment_reply',
    'page arguments' => array(3),
    'access callback' => 'node_access',
    'access arguments' => array('view', 3),
    // 'delivery callback' => 'ajax_deliver',
    // 'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Add application form settings.
 */
function pgh_form_settings($form, &$form_state) {
  $form['pgh_form_max_questions'] = array(
    '#type' => 'textfield',
    '#title' => 'Max question per applications',
    '#default_value' => variable_get('pgh_form_max_questions', 100000),
  );

  $form['pgh_form_drupal_validate'] = array(
    '#type' => 'checkbox',
    '#title' => 'Use drupal validate upon submission',
    '#default_value' => variable_get('pgh_form_drupal_validate', FALSE),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'submit',
  );

  return $form;
}

/**
 * Save application form settings.
 */
function pgh_form_settings_submit($form, &$form_state) {
  variable_set('pgh_form_max_questions', $form_state['values']['pgh_form_max_questions']);
  variable_set('pgh_form_drupal_validate', $form_state['values']['pgh_form_drupal_validate']);
}

/**
 * Implements hook_theme().
 */
function pgh_form_theme() {
  return array(
    'pgh_form_table' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Theme function for PGH table-type questions.
 *
 * @author Fang Jin <fang@designhammer.com>
 */
function theme_pgh_form_table($vars) {
  $element = $vars['element'];
  $parse = &$element['#layout'];

  // Prepare to theme a table.
  $header = array();
  $rows = array();
  $i = 0;
  foreach ($parse as $row) {
    // Treat every row to be the same, no header row.
    // First row is header.
    $data = array();
    foreach ($row as $cell) {
      // Check if cell is a question.
      $cell_data = $cell;
      // dsm($cell);
      if (substr($cell, 0, 5) == 'pghq_') {
        // Find the question.
        if ($qid = pgh_form_find_qid_by_tag($cell)) {
          $cell_data = render($element[$qid]);
        }
      }
      $data[] = array('data' => $cell_data);
    }
    $rows[] = $data;
  }

  return theme('table', array('header' => $header, 'rows' => $rows));
}

/**
 * Page callback to display edit form for an application and category.
 *
 * @param object $application
 *   Node for a specific application instance.
 *
 * @return int
 *   MENU status constants.
 *
 * @author Jay Roberts <jay@designhammer.com>
 */
function pgh_form_application_page($application) {
  if (!$application) {
    return MENU_NOT_FOUND;
  }

  $application_wrapper = entity_metadata_wrapper('node', $application);
  $application_type = pgh_api_application_type_by_id($application_wrapper->field_application_type->value());

  if ($application_type === FALSE) {
    drupal_set_message(check_plain('Couldn\'t load application type  ' . $application_wrapper->field_application_type->value()));
    return MENU_NOT_FOUND;
  }

  $application_type_wrapper = entity_metadata_wrapper('node', $application_type);

  $first_category = NULL;

  if (isset($application_type_wrapper->field_apptype_categories)) {
    $first_category = $application_type_wrapper->field_apptype_categories[0]->value();
  }

  if (!$first_category) {
    return MENU_NOT_FOUND;
  }

  if (empty($first_category->title)) {
    drupal_set_message(check_plain('Missing title for category ' . $first_category->nid));
    return MENU_NOT_FOUND;
  }

  $readonly = (arg(2) == 'readonly');
  if ($readonly) {
    drupal_goto('review/' . $application->nid . '/category/' . $first_category->title . '/readonly');
  }
  else {
    drupal_goto('application/' . $application->nid . '/category/' . $first_category->title);
  }
}

/**
 * Page callback to display an edit form for a specific category.
 *
 * @param object $application
 *   Node for a specific application instance.
 *
 * @param string $category_id
 *   The category id to display.
 *
 * @return string
 *   Rendered HTML for the page contents.
 *
 * @author Fang Jin <fang@designhammer.com>
 */
function pgh_form_category_page($application, $category_id) {
  // Load the app by app_id.
  if ($application) {
    // See: https://ac.designhammer.net/projects
    // /practice-greenhealth-phase-1/tasks/237
    // for discussion about this shim.
    $shim_options = array(
      'group' => JS_LIBRARY,
      'weight' => -30,
      'scope' => 'header',
    );
    drupal_add_js(drupal_get_path('module', 'pgh_form') . '/js/shim_function_prototype_name.js', $shim_options);

    drupal_add_js(drupal_get_path('module', 'pgh_form') . '/js/jquery.scrollto.min.js', array('weight' => 2, 'scope' => 'footer'));
    drupal_add_js(drupal_get_path('module', 'pgh_form') . '/js/pgh_form_settings.js', array('weight' => 2, 'scope' => 'footer'));
    drupal_add_js(drupal_get_path('module', 'pgh_form') . '/js/pgh_form.js', array('weight' => 2, 'scope' => 'footer'));

    $application_wrapper = entity_metadata_wrapper('node', $application);
    $application_type = pgh_api_application_type_by_id($application_wrapper->field_application_type->value());

    $application_type_wrapper = entity_metadata_wrapper('node', $application_type);

    $application_title = $application_type_wrapper->body->value() ? $application_type_wrapper->body->value->raw() : '';

    // Find category_id if key is provided.
    if (!is_numeric($category_id)) {
      $category_id = pgh_api_find_nid($category_id, 'category');
    }

    $category = node_load($category_id);
    $category_wrapper = entity_metadata_wrapper('node', $category);

    $category_title = $category_wrapper->title->value() . ' (no name provided)';
    if ($category_wrapper->body->value()) {
      $category_title = $category_wrapper->body->value->raw();
    }

    drupal_set_title($application_title . ': ' . $category_title);

    // Set readonly through URL.
    $readonly = (arg(4) == 'readonly');

    return drupal_get_form('pgh_application_form', $application->nid, $category_id, $readonly);
  }
  else {
    return MENU_NOT_FOUND;
  }
}

/**
 * Form callback for a specific application and category.
 *
 * @param array $form
 *   Form array.
 *
 * @param array $form_state
 *   Form state array.
 *
 * @param int $app_id
 *   NID for a specific application instance.
 *
 * @param string $cat_id
 *   The category id to display.
 *
 * @return array
 *   A Drupal form array ready to be rendered.
 *
 * @author Fang Jin <fang@designhammer.com>
 */
function pgh_application_form($form, &$form_state, $app_id = NULL, $cat_id = NULL, $readonly = FALSE) {
  $form = array();

  if (empty($app_id) || empty($cat_id)) {
    return $form;
  }

  // Load category by name, can be id as well.
  $cat = node_load($cat_id);
  $cat_wrapper = entity_metadata_wrapper('node', $cat);

  // For debugging purpose add a counter.
  $debug = 0;
  $total = variable_get('pgh_form_max_questions', 1000000000);

  $form['ajax_div'] = array(
    '#markup' => '',
    '#prefix' => '<div id="pgh_form_ajax_div">',
    '#suffix' => '</div><!-- #question --><br /><br />',
  );

  // Cache application data for future reuse.
  foreach ($cat_wrapper->field_category_sections->getIterator() as $sec_wrapper) {
    $qids = $sec_wrapper->field_section_questions->raw();

    // Cache questions.
    $questions = node_load_multiple($qids);
    foreach ($questions as &$question) {
      pgh_form_set_data($question->title, 'question', $question);
    }

    // Cache responses.
    $rids = pgh_api_find_nodes(
      array(
        'type' => 'response',
        'field_response_application' => array('target_id', $app_id, '='),
        'field_response_question' => array('target_id', $qids, 'IN')
      ),
      NULL, TRUE
    );
    $responses = node_load_multiple($rids);
    foreach ($responses as &$response) {
      pgh_form_set_data($response->title, 'response', $response);
      // Need a mapping between question and response.
      if ($response_wrapper = pgh_form_get_data($response->title, 'response_wrapper')) {
        $qid = $response_wrapper->field_response_question->raw();
        pgh_form_set_data($qid, 'mapping', $response->title);
      }
    }
  }

  // Build form.
  foreach ($cat_wrapper->field_category_sections->getIterator() as $sec_wrapper) {
    $caption = $sec_wrapper->field_section_label->value();

    // Add a fieldset to hold section info.
    if (!empty($caption)) {
      $fieldset = 'fieldset_' . $sec_wrapper->title->value();
      $form[$fieldset] = array(
        '#prefix' => '<div><h3 class="legend">' . t($caption) . '</h3>',
        '#suffix' => '</div>',
      );
    }
    else {
      $fieldset = 'container_' . $sec_wrapper->title->value();
      $form[$fieldset] = array(
        '#type' => 'container',
      );
    }

    $qids = $sec_wrapper->field_section_questions->raw();
    foreach ($qids as $qid) {

      // Skip processed question.
      if (pgh_form_get_data($qid, 'processed')) {
        continue;
      }

      if ($q_wrapper = pgh_form_get_data($qid, 'question_wrapper')) {

        $major = 'question_' . $q_wrapper->label();
        $question_form = pgh_form_render_question_layout($qid, $app_id, $readonly);
        $form[$fieldset][$major][$qid] = $question_form;

        // Add comment for question for each response.
        if (!empty($question_form['#response_id'])) {
          $form_item = pgh_form_render_question_comment($question_form['#response_id']);

          // Respect the visibility of this question.
          if ($q_wrapper->field_question_parent_qid->value()) {
            $form_item['#states'] = pgh_form_question_states($qid);
          }
          $form[$fieldset][$major]['comment'] = $form_item;
        }

        $debug = $debug + 1;
        if ($debug == $total) {
          break;
        }
      }
    }

    if ($debug == $total) {
      break;
    }
  }

  global $_pgh_application_data;
  // dsm($_pgh_application_data);

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );

  $form['application'] = array(
    '#type' => 'hidden',
    '#value' => $app_id,
  );

  $form['category'] = array(
    '#type' => 'hidden',
    '#value' => $cat_id,
  );

  return $form;
}


/**
 * Application form AJAX callback.
 *
 * @param array $form
 *   Form array.
 *
 * @param array $form_state
 *   Form state array.
 *
 * @author  Fang Jin <fang@designhammer.com>
 */
function pgh_application_form_element_callback($form, &$form_state) {
  if (empty($form_state['triggering_element']['#parents'][0])) {
    return;
  }
  // Find and save form element.
  $parents = $form_state['triggering_element']['#array_parents'];
  array_pop($parents);
  $element = drupal_array_get_nested_value($form, $parents);
  $q_tag = $element['#question-tag'];
  $qid = $form_state['triggering_element']['#parents'][0];
  $app_id = $form_state['values']['application'];
  $value = $form_state['values'][$qid];

  pgh_api_save_response($app_id, $qid, $value);

  // Validate the response.
  $error_msg = '<div id="error-container-' . $q_tag . '">';
  if ($validations = unserialize($element['#validation-rules'])) {
    $errors = pgh_api_validate_question_value($validations, $value);
    if ($errors) {
      $error_msg .= pgh_form_error_html($q_tag, $errors);
    }
  }
  $error_msg .= '</div><!-- #error-container -->';

  pgh_api_recalculate_progress_for_category($form_state['values']['application'], $form_state['values']['category']);

  return $error_msg;
}

/**
 * Application form submit handler. Handles submission of the fields in a single category of the application.
 *
 * Determines the value to be stored and calculates the points for each question.
 * Stores this information in the appropriate response node.
 *
 * @param array $form
 *   Form array.
 *
 * @param array $form_state
 *   Form state array.
 *
 * @author Fang Jin <fang@designhammer.com>
 */
function pgh_application_form_submit($form, &$form_state) {
  // Since preparation have all response ready, we just need to save one by one.
  $app_id = $form_state['values']['application'];

  foreach ($form_state['values'] as $qid => &$value) {
    if (is_numeric($qid)) {

      // Media selector bug, need to access from input.
      if (is_array($value) && isset($value['fid'])) {
        $value = $form_state['input'][$qid]['fid'];
      }

      pgh_api_save_response($app_id, $qid, $value);
    }
  }

  pgh_api_recalculate_progress_for_category($form_state['values']['application'], $form_state['values']['category']);
}

/**
 * Builds a Drupal Form API element for a specific question in an application.
 *
 * Sets the default value to a provided answer in a response node if one is available.
 *
 * @param int $qid
 *   NID for a specific question.
 *
 * @param int $app_id
 *   NID for a specific application instance.
 *
 * @return array
 *   A Drupal Form API element representing the supplied question.
 *
 * @author Fang Jin <fang@designhammer.com>
 */
function pgh_form_render_question($qid, $app_id = NULL, $readonly = FALSE) {
  $form_item = array();

  if (!($question_wrapper = pgh_form_get_data($qid, 'question_wrapper'))) {
    return $form_item;
  }

  $q_tag = $question_wrapper->title->value();
  $form_item['#question-tag'] = $q_tag;
  $type = $question_wrapper->field_question_type->value();
  $style = $question_wrapper->field_question_style->value();
  $default_formula = $question_wrapper->field_question_formula->value();

  if ($style == 'date') {
    drupal_add_library('system', 'ui.datepicker');
  }

  // Store any question-specific administrative information in $admin_info. Items will be
  // included after the question prompt if the user is an awards administrator.
  $admin_info = array();
  $admin_info[] = ' <small>[' . $question_wrapper->title->value() . ']</small> ';
  $admin_info[] = '<small>' . l(t('[Q]'), 'node/' . $question_wrapper->getIdentifier() . '/edit') . '</small>';

  // Prepare response for question expecting a response.
  // if (!in_array($type, array('html', 'container'))) {
  if (!in_array($type, array('html'))) {
    $answer = pgh_form_get_response_answer($qid, $app_id);
    $rid = $answer['id'];

    $admin_info[] = '<small>' . l(t('[R]'), 'node/' . $rid . '/edit') . '</small>';
    $admin_info[] = ' <small>[P' . intval($answer['point']) . ']</small> ';
    $admin_info[] = ' <small>[S' . intval($answer['score']) . ']</small> ';
    $admin_info[] = ' <small>[K' . $answer['kpi'] . ']</small> ';

    // Only set the default value if a response has been provided.
    if ($answer['updated']) {
      $form_item['#default_value'] = $answer['value'];
    }
  }

  $form_item['#title'] = '<div class="question-desc">' . check_markup($question_wrapper->field_question_prompt->value(), 'question_text', '', FALSE) . '</div><!-- .question-desc -->';

  if (user_access('administer awards system')) {
    $form_item['#title'] .= '<div class="question-admin">' . implode(' ', $admin_info) . '</div>';
  }

  // Make sure the flat return.
  $form_item['#tree'] = FALSE;

  $form_item['#question_id'] = intval($question_wrapper->getIdentifier());
  $form_item['#response_id'] = !empty($rid) ? $rid : '';

  // Dependency display.
  if ($parent_qid = $question_wrapper->field_question_parent_qid->value()) {
    $form_item['#states'] = pgh_form_question_states($question_wrapper->getIdentifier());
  }

  // Ajax processing.
  if (_pgh_form_should_use_ajax() && !$readonly) {
    $form_item['#ajax'] = array(
      'callback' => 'pgh_application_form_element_callback',
      'wrapper' => 'error-container-' . $question_wrapper->title->value(),
    );
  }

  // Perform additional question-type specific processing.
  switch ($type) {
    case 'html':
    case 'container':
      $form_item['#type'] = 'item';
      $form_item['#markup'] = t($form_item['#title']);
      unset($form_item['#title']);
      break;

    case 'text':
      switch ($style) {
        case 'textarea':
          $form_item['#type'] = 'textarea';
          $form_item['#size'] = 3;
          break;

        default:
          $form_item['#type'] = 'textfield';
          $form_item['#size'] = NULL;
          break;
      }
      break;

    case 'selection':
      $options = $question_wrapper->field_question_options->value();

      switch ($style) {
        case 'dropdown':
          $form_item['#type'] = 'select';
          $form_item['#options'] = $options;
          $form_item['#empty_option'] = t('Select an option...');
          break;

        case 'default':
        case 'radios':
          $form_item['#type'] = 'radios';
          $form_item['#options'] = $options;
          // The empty string is coerced to 0,
          // we want to treat it as not supplied.
          if ($answer['value'] == '') {
            unset($form_item['#default_value']);
          }
          break;

        case 'checkboxes':
          $form_item['#type'] = 'checkboxes';
          $form_item['#options'] = drupal_map_assoc($options);
          if (isset($form_item['#default_value'])) {
            $form_item['#default_value'] = unserialize($form_item['#default_value']);
          }
          if (empty($answer['value'])) {
            unset($form_item['#default_value']);
          }
          break;

        default:
          $form_item['#prefix'] = '<b><em>Not Implemented Style - ' . $style . '</em></b>';
          $form_item['#type'] = 'textfield';
          $form_item['#size'] = NULL;
          break;
      }

      break;

    case 'file':
      $desc = '';
      $shared = FALSE;
      if ($fid = $answer['value']) {
        $file = file_load($fid);
        $file_wrapper = entity_metadata_wrapper('file', $file);
        $desc = $file_wrapper->field_media_description->value();
        $shared = $file_wrapper->field_media_shared->value();
      }
      $media = array(
        '#type' => 'media',
        '#after_build' => array('pgh_form_file_after_build'),
        '#input' => TRUE,
        '#media_options' => array(
          'global' => array(
            'types' => array('document'),
            'file_directory' => 'application/' . $app_id,
          ),
        ),
        '#attached' => array(),
        '#extended' => TRUE,
        '#tree' => TRUE,
        '#value' => !empty($answer['value']) ? array('fid' => $answer['value']) : '',
        '#custom_description' => $desc,
        '#custom_shared' => $shared,
      );
      $form_item = array_merge($form_item, $media);
      break;

    default:
      $form_item['#type'] = 'textfield';
      $form_item['#size'] = NULL;
      $form_item['#prefix'] = '<b><em>Not Implemented Type - ' . $type . '</em></b>';
      break;
  }

  $form_item['#description'] = '<div id="error-container-' . $question_wrapper->title->value() . '">';

  // Add error validation to description.
  $validations = array();
  if ((!empty($answer['updated'])) && ($validations = $question_wrapper->field_question_validation->value())) {
    $errors = pgh_api_validate_question_value($validations, $answer['value']);
    if ($errors) {
      $form_item['#description'] .= pgh_form_error_html($question_wrapper->title->value(), $errors);
    }
  }
  $form_item['#validation-rules'] = serialize($validations);

  $form_item['#description'] .= '</div><!-- #error-container -->';

  // We add the post prompt to the description so that it will be
  // contained within the question form-item. Otherwise, post prompts
  // wouldn't be hidden for dependent questions.
  if ($question_wrapper->field_question_post_prompt->value()) {
    $form_item['#description'] .= '<div class="question-post-prompt">' . check_markup($question_wrapper->field_question_post_prompt->value(), 'question_text', '', FALSE) . '</div><!-- .question-post-prompt -->';
  }

  $data_attributes = array();

  // Add id and classes for theming.
  $classes = array(
    'question',
    'question-type-' . $type,
    'question-style-' . $style,
  );
  if ($default_formula) {
    $classes[] = 'question-readonly';
  }

  if ($parent_qid) {
    $classes[] = 'question-dependent';
    $classes[] = 'data-parent-id-question-' . $parent_qid;
    $data_attributes[] = 'data-parent-id="question-' . $parent_qid . '"';
  }

  $form_item['#prefix'] = '<div id="question-' . $question_wrapper->title->value() . '" class="' . implode($classes, ' ') . '" ' . implode($data_attributes, ' ') . '>';
  $form_item['#suffix'] = '</div><!-- #question -->';

  // Add default question id handling.
  // If no default value is set and a default question id is given,
  // set it to default question response value.
  // This part can not be cached,
  // since the question can be outside of this category.
  $form_item['#default_question_id'] = $question_wrapper->field_question_formula->value();
  if (!empty($form_item['#default_question_id'])) {
    // Fetch question.
    if ($fid = pgh_find_question_id($form_item['#default_question_id'])) {
      // Fetch the question response.
      if ($rid = pgh_api_find_response_id($app_id, $fid)) {
        $answer = pgh_api_get_response($app_id, $fid);
        $form_item['#default_value'] = $answer['value'];
      }
    }
  }

  // Disable this question if it has a default formula.
  if ($default_formula) {
    $form_item['#attributes'] = array('readonly' => 'readonly');
  }

  // For readonly form, disable element.
  if ($readonly) {
    $form_item['#disabled'] = TRUE;
  }

  // Mark this question as processed.
  pgh_form_set_data($qid, 'processed', 1, TRUE);

  return $form_item;
}

/**
 * Set permission control to file in read-only mode.
 *
 * @author Fang Jin <fang@designhammer.com>
 */
function pgh_form_file_after_build($form, &$form_state) {
  if (!empty($form['#disabled'])) {
    $form['title']['#description'] = $form['#custom_description'];
    $form['title']['#description'] .= ($form['#custom_shared']) ? ' <strong>SHARED</strong>' : '';
    $form['edit']['#access'] = FALSE;
    $form['select']['#access'] = FALSE;
    $form['remove']['#access'] = FALSE;
  }
  return $form;
}

/**
 * Generate form questions with layout.
 */

/**
 * Builds a Drupal Form API element for a specific question and handles layout for 'container' type questions.
 *
 * If the question has a layout string specified, parse the layout and render it.
 *
 * This is not a recursive function. Questions with type 'container' may not contain other questions with
 * type 'container'.
 *
 * @param int $qid
 *   NID for a specific question.
 *
 * @param int $app_id
 *   NID for a specific application instance.
 *
 * @return array
 *   A Drupal Form API element representing the supplied question.
 *
 * @author Fang Jin <fang@designhammer.com>
 */
function pgh_form_render_question_layout($qid, $app_id = NULL, $readonly = FALSE) {
  $form_item = array();

  if (!($question_wrapper = pgh_form_get_data($qid, 'question_wrapper'))) {
    return $form_item;
  }

  $type = $question_wrapper->field_question_type->value();
  $layout = $question_wrapper->field_question_layout->value();
  $prompt = check_markup($question_wrapper->field_question_prompt->value(), 'question_text', '', FALSE);

  // Store any question-specific administrative information in $admin_info.
  // Items will be included after the question prompt if
  // the user is an awards administrator.
  $admin_info = array();
  $admin_info[] = ' <small>[' . $question_wrapper->title->value() . ']</small> ';
  $admin_info[] = '<small>' . l(t('[Q]'), 'node/' . $question_wrapper->getIdentifier() . '/edit') . '</small>';

  if (!empty($layout) && ($type == 'container')) {
    // Container needs to have a response as well.
    $answer = pgh_form_get_response_answer($qid, $app_id);
    $rid = $answer['id'];

    $admin_info[] = '<small>' . l(t('[R]'), 'node/' . $rid . '/edit') . '</small>';
    $admin_info[] = ' <small>[P' . intval($answer['point']) . ']</small> ';

    $form_item['#question_id'] = intval($question_wrapper->getIdentifier());
    $form_item['#response_id'] = !empty($rid) ? $rid : '';

    // Print the container parent element.
    $parse = pgh_parse_layout($layout);

    $parent_qid = $question_wrapper->field_question_parent_qid->value();
    $classes = array('question-container');
    $data_attributes = array();
    if ($parent_qid) {
      $classes[] = 'question-dependent';
      $classes[] = 'data-parent-id-question-' . $parent_qid;
      $data_attributes[] = 'data-parent-id="question-' . $parent_qid . '"';

      $form_item['#states'] = pgh_form_question_states($question_wrapper->getIdentifier());
    }

    $opening_div = '<div id="question-' . $question_wrapper->title->value() . '" class="' . implode($classes, ' ') . '" ' . implode($data_attributes, ' ') . '>';

    // We should be able to add prompt to the prefix section.
    $form_item += array(
      '#type' => 'item',
      '#title' => $prompt,
      '#markup' => 'Container markup',
      '#prefix' => $opening_div,
      '#tree' => TRUE,
      '#theme' => 'pgh_form_table',
      '#layout' => $parse,
      '#suffix' => '</div>',
    );

    // We add the post prompt to the description so that it will be
    // contained within the question form-item. Otherwise, post prompts
    // wouldn't be hidden for dependent questions.
    if ($question_wrapper->field_question_post_prompt->value()) {
      $form_item['#description'] = '<div class="question-post-prompt">' . check_markup($question_wrapper->field_question_post_prompt->value(), 'question_text', '', FALSE) . '</div><!-- .question-post-prompt -->';
    }

    if (user_access('administer awards system')) {
      $form_item['#title'] .= ' <div class="question-admin">' . implode(' ', $admin_info) . '</div>';
    }

    // Print child elements.
    foreach ($parse as $row) {
      foreach ($row as $cell) {
        if (substr($cell, 0, 5) == 'pghq_') {
          if ($child_id = pgh_form_find_qid_by_tag($cell)) {
            $form_item[$child_id] = pgh_form_render_question($child_id, $app_id, $readonly);
          }
        }
      }
    }
  }
  else {
    // This is the original without layout handling.
    $form_item = pgh_form_render_question($qid, $app_id, $readonly);
  }

  return $form_item;
}

/**
 * Returns markup for a div containing error messages for a specific question.
 *
 * @param string $question_id
 *   A question identifier.
 *
 * @param array $errors
 *   An array of errors to display to the end user. See pgh_api_validate_question_value() for details.
 *
 * @return string
 *   An html string with a properly formatted error message.
 *
 * @author Jay Roberts <jay@designhammer.com>
 */
function pgh_form_error_html($question_id, $errors) {
  $most_severe_type = 'warning';
  $messages = '';

  foreach ($errors as $error) {
    if ($error['type'] == 'error') {
      $most_severe_type = 'error';
    }
    $messages .= '<span class="validation-message-' . $error['type'] . '">' . $error['message'] . '</span>';
  }

  $output = '<div id="error-' . $question_id . '" class="validation-messages validation-' . $most_severe_type . '">';
  $output .= $messages;
  $output .= '</div><!-- #error -->';

  return $output;
}

/**
 * Return the visibility state array based on the supplied question node.
 *
 * This is the code that provides support for the "Dependant Question" feature.
 *
 * @param int $qid
 *   Question node id
 *
 * @return array
 *   The visibility state array supported by the Drupal form API.
 */
function pgh_form_question_states($qid) {
  if (!($wrapper = pgh_form_get_data($qid, 'question_wrapper'))) {
    return array();
  }

  // Load parent question.
  if ($parent_wrapper = pgh_form_get_data($wrapper->field_question_parent_qid->value(), 'question_wrapper')) {
    $parent_type = $parent_wrapper->field_question_type->value();
    $parent_style = $parent_wrapper->field_question_style->value();

    $name = $parent_wrapper->getIdentifier();
    $value = $wrapper->field_question_parent_value->value();

    if ($value === NULL) {
      drupal_set_message(t('Question %qid specifies parent %pid but does not specify a parent required value.', array('%qid' => $wrapper->title->value(), '%pid' => $parent_wrapper->title->value())), 'error');
      return array();
    }

    $condition = '';
    switch ($parent_type) {
      case 'selection':
        switch ($parent_style) {
          // Multiple choices.
          case 'checkboxes':
            $name = $parent_wrapper->getIdentifier() . '[' . $value . ']';
            $condition = array('checked' => TRUE);
            break;

          // Single choice, ex. radios.
          default:
            $options = $parent_wrapper->field_question_options->value();
            $value = array_search($value, $options);
            break;
        }
        break;

      default:
        // Noop. Dependant question display is currently only
        // supported for the 'selection' question type.
        break;
    }
    if (empty($condition)) {
      $condition = array('value' => $value);
    }
    $result = array(
      'visible' => array(
        ':input[name="' . $name . '"]' => $condition,
      ),
    );
    return $result;
  }

  return array();
}

/**
 * Returns the NID for a question based on a supplied question id.
 *
 * @param string $key
 *   A question ID.
 *
 * @return int
 *   The NID for the supplied question id or 0 if not found.
 *
 * @author Fang Jin <fang@designhammer.com>
 */
function pgh_find_question_id($key) {
  // TODO: This function accepts an ID and returns a NID. The naming makes it seem like it returns a question ID.
  // Should be renamed to pgh_api_nid_for_question($qid)
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
                  ->propertyCondition('type', 'question')
                  ->propertyCondition('title', $key)
                  ->execute();
  if (!empty($result['node'])) {
    $keys = array_keys($result['node']);
    return $keys[0];
  }
  else {
    return 0;
  }
}

/**
 * Parse a layout string into an array of labels and question ids.
 *
 * Layout strings represent 2-dimensional arrays with columns delimited by commas and
 * rows delimited by semicolons. Whitespace and newlines around elements are removed.
 *
 * Example:
 *
 * Fruit,  Color,             Taste,              Notes;
 * Apple,  pghq_color_apple,  pghq_taste_apple,   pghq_notes_apple;
 * Pear,   pghq_color_pear,   pghq_taste_pear,    pghq_notes_pear;
 * Banana, pghq_color_banana, pghq_taste_banana,  pghq_notes_banana;
 *
 * @param string $layout
 *   The layout string to parse.
 *
 * @return array
 *   A parsed array matching the structure inidicated by the layout string. Array values are strings.
 */
function pgh_parse_layout($layout) {
  $rows = array_map('trim', explode('||', $layout));
  $result = array();
  foreach ($rows as $row) {
    $result[] = array_map('trim', explode('|', $row));
  }
  return $result;
}

/**
 * Display completion status of the application and notes on any validation errors.
 *
 * If the application is complete and has no errors allow the user to submit the application which
 * will set the status to submitted and prevent any additional changes from being made.
 *
 * @param object $application
 *   The application node to submit.
 *
 * @return array
 *   A renderable array for the submit form.
 *
 * @author  Jay Roberts <jay@designhammer.com>
 */
function pgh_form_application_submit_page($application) {
  drupal_add_js(drupal_get_path('module', 'pgh_form') . '/js/pgh_form_submission.js', array('weight' => 2, 'scope' => 'footer'));

  $categories = pgh_api_categories_for_application($application->nid);

  $rows = array();

  $incomplete_categories = FALSE;
  $invalid_categories = FALSE;

  foreach ($categories as $category) {
    $category_wrapper = entity_metadata_wrapper('node', $category);
    $progress = pgh_api_progress_for_category($application->nid, $category->nid);

    if ($progress < 1) {
      $incomplete_categories = TRUE;
    }

    $validation = '<span class="valid">Valid</span>';
    $category_errors = pgh_api_errors_for_category($application->nid, $category->nid);

    if ($category_errors) {
      $validation = '<span class="invalid">There are validation errors in this category</span>';
      $validation .= '<div class="error-list">';
      $validation .= '<p>You can click an error below to go to the question it refers to.</p>';

      foreach ($category_errors as $qid => $question_errors) {
        foreach ($question_errors as $error) {
          $options = array(
            'fragment' => 'question-' . $qid,
            'attributes' => array(
              'class' => array('validation-link-' . $error['type']),
            ),
          );
          $validation .= l($error['message'], 'application/' . $application->nid . '/category/' . $category->title, $options) . '<br />';

          // Only errors of type 'error' (not 'warning') should prevent application submission.
          if ($error['type'] == 'error') {
            $invalid_categories = TRUE;
          }
        }
      }

      $validation .= '</div>';
    }

    $category_name = $category_wrapper->body->value() ? $category_wrapper->body->value->raw() : 'Missing title for category ' . $category->nid;

    $rows[] = array(
      l($category_name, 'application/' . $application->nid . '/category/' . $category->title),
      pgh_progress_bar($progress),
      $validation,
    );
  }

  $output = array();
  $output['categories'] = array(
    '#theme' => 'table',
    '#header' => array('Category', 'Progress', 'Validation'),
    '#rows' => $rows,
  );

  if ($invalid_categories) {
    $output['incomplete_categories'] = array(
      '#prefix' => '<div class="submission_warning">',
      '#markup' => t('Some of the categories have validation errors. Please review the marked categories for missing or invalid responses.'),
      '#suffix' => '</div>',
    );
  }
  else {
    $output['incomplete_categories'] = array(
      '#prefix' => '<div class="submission_message">',
      '#markup' => t('Please ensure your application is complete. You will not be able to make changes after submitting.'),
      '#suffix' => '</div>',
    );
    $output['submit_form'] = drupal_get_form('pgh_form_application_submit_form', $application);
  }

  return $output;
}

/**
 * Form callback for application submission.
 *
 * @param array $form
 *   Form array.
 *
 * @param array $form_state
 *   Form state array.
 *
 * @param object $application
 *   Node for a specific application instance.
 *
 * @return array
 *   A form array.
 *
 * @author Jay Roberts <jay@designhammer.com>
 */
function pgh_form_application_submit_form($form, &$form_state, $application) {
  $form = array();

  $form['application_nid'] = array(
    '#type' => 'hidden',
    '#value' => $application->nid,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit this application',
  );
  return $form;
}

/**
 * Returns a boolean indicating whether the form should use Drupal Form API AJAX functionality.
 *
 * AJAX functionality breaks on older browsers (shows long running script warning). This function allows us
 * to quickly test enabling and disabling the AJAX code.
 *
 * @return bool
 *   A boolean indicating whether the form should use Drupal Form API AJAX functionality.
 */
function _pgh_form_should_use_ajax() {
  // Currently, we want to run the AJAX code for all browsers, even if it is not exceptionally performant.
  return TRUE;
}

/**
 * Form submission handler for application submission.
 *
 * @param array $form
 *   Form array.
 *
 * @param array $form_state
 *   Form state array.
 *
 * @return array
 *   A form array.
 *
 * @author Jay Roberts <jay@designhammer.com>
 */
function pgh_form_application_submit_form_submit($form, &$form_state) {
  $application = node_load($form_state['values']['application_nid']);
  $application_wrapper = entity_metadata_wrapper('node', $application);
  $application_wrapper->field_application_status->set('submitted');
  $application_wrapper->save();

  // Send email to current user.
  global $user;
  drupal_mail('pgh_form', 'pgh_application_submit', $user->mail, 'und');

  drupal_set_message(t('The application has been submitted successfully'));
  drupal_goto('dashboard');
}

/**
 * Implements hook_mail().
 *
 * @author Fang Jin <fang@designhammer.com>
 */
function pgh_form_mail($key, &$message, $params) {
  $message['subject'] = t('Notification from Practice Greenhealth');
  $message['body'][] = t('Your Award application has been received by Practice Greenhealth.');
}

/**
 * Render comment form for question.
 *
 * @param int $rid
 *   Response node id.
 *
 * @author Fang Jin <fang@designhammer.com>
 */
function pgh_form_render_question_comment($rid) {
  $form = array(
    '#type' => 'container',
    '#title' => 'comment',
    '#attributes' => array('class' => array('comment-form')),
  );

  $form['body'] = array(
    '#type' => 'textarea',
    '#size' => 3,
    '#prefix' => '<div class="comment-wrapper"><div id="comment_' . $rid . '">',
    '#suffix' => '</div>',
    '#description' => t('Please use the Comment feature only where necessary for clarification. No points are awarded for comments.'),
    '#resizable' => FALSE,
    '#default_value' => pgh_form_get_question_comment($rid),
  );

  $links['comment-add'] = array(
    'title' => t('Save comment'),
    'href' => "question/comment/reply/" . $rid,
    'attributes' => array(
      'title' => t('Add a new comment to this question.'),
      'class' => 'use-custom-ajax',
    ),
  );
  $form['links'] = array(
    '#theme' => 'links__node__comment',
    '#links' => $links,
    '#suffix' => '</div><div class="add-comment">Add Comment</div>',
    '#attributes' => array('class' => array('links', 'inline')),
  );

  drupal_add_js(
    drupal_get_path('module', 'pgh_form') . '/js/pgh_comment.js',
    array('scope' => 'header')
  );

  return $form;
}

/**
 * Question comment reply ajax callback.
 *
 * @param int $rid
 *   Response node id.
 *
 * @author Fang Jin <fang@designhammer.com>
 */
function pgh_form_quesiton_comment_reply($rid) {
  $body = $_POST['body'];
  pgh_form_set_question_comment($rid, $body);
  $form = 'Comments has been submitted.';
  return drupal_json_output(array(
    'response' => $form,
    // 'data' => $_POST
  ));

  // Drupal ajax response
  // $commands[] = ajax_command_replace('#comment_' . $qid, $form);
  // return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Save comment per response per user.
 *
 * @param int $rid
 *   Response node id.
 * @param string $body
 *   Response comment body.
 *
 * @author Fang Jin <fang@designhammer.com>
 */
function pgh_form_set_question_comment($rid, $body) {
  // Should be merged using pgh_api_node_ids
  // But this function is outdated and can be upgraded
  // For now use EntityFieldQuery() manually.

  // Find if the comment already exist.
  global $user;
  $cid = 0;
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'comment');
  $query->propertyCondition('nid', $rid);
  $query->propertyCondition('uid', $user->uid);
  $result = $query->execute();
  if (!empty($result['comment'])) {
    $keys = array_keys($result['comment']);
    $cid = $keys[0];
  };
  $wrapper = NULL;
  if ($cid) {
    $comment = comment_load($cid);
  }
  else {
    // Add a new comment.
    $comment = entity_create('comment', array(
      'type' => 'comment',
      'node_type' => 'comment_node_response',
      'uid' => $user->uid,
      'nid' => $rid,
    ));
  }
  $wrapper = entity_metadata_wrapper('comment', $comment);
  $wrapper->subject = $rid;
  $wrapper->comment_body->set(
    array(
      'value' => $body,
      'format' => 'filtered_html',
    )
  );
  $wrapper->save();
}

/**
 * Get comment per response per user.
 *
 * @param int $rid
 *   Response node id.
 *
 * @author Fang Jin <fang@designhammer.com>
 */
function pgh_form_get_question_comment($rid) {
  global $user;
  $cid = 0;
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'comment');
  $query->propertyCondition('nid', $rid);
  $query->propertyCondition('uid', $user->uid);
  $result = $query->execute();
  if (!empty($result['comment'])) {
    $keys = array_keys($result['comment']);
    $cid = $keys[0];
  };
  if ($cid) {
    $comment = comment_load($cid);
    $wrapper = entity_metadata_wrapper('comment', $comment);
    return $wrapper->comment_body->value->raw();
  }
  return '';
}

/**
 * Set application global object data.
 *
 * @author Fang Jin <fang@designhammer.com>
 */
function pgh_form_set_data($question_tag, $object, $data, $overwrite = FALSE) {
  global $_pgh_application_data;

  if (is_numeric($question_tag)) {
    if (isset($_pgh_application_data[$question_tag])) {
      $question_tag = $_pgh_application_data[$question_tag];
    }
  }

  if ($overwrite) {
    if (isset($_pgh_application_data[$question_tag][$object])) {
      return FALSE;
    }
  }

  $_pgh_application_data[$question_tag][$object] = $data;

  if (($object == 'processed') || ($object == 'mapping')) {
    return TRUE;
  }
  $wrapper = entity_metadata_wrapper('node', $_pgh_application_data[$question_tag][$object]);
  $_pgh_application_data[$question_tag][$object . '_wrapper'] = $wrapper;
  $_pgh_application_data[$data->nid] = $question_tag;

  return TRUE;
}

/**
 * Get application global data.
 */
function pgh_form_get_data($question_tag, $object) {
  global $_pgh_application_data;

  if (is_numeric($question_tag)) {
    if (isset($_pgh_application_data[$question_tag])) {
      $question_tag = $_pgh_application_data[$question_tag];
    }
  }
  if (isset($_pgh_application_data[$question_tag][$object])) {
    return $_pgh_application_data[$question_tag][$object];
  }

  return array();
}

/**
 * Find nid of question given question tag.
 */
function pgh_form_find_qid_by_tag($question_tag) {
  global $_pgh_application_data;

  if ($question = pgh_form_get_data($question_tag, 'question')) {
    return $question->nid;
  }

  return 0;
}

/**
 * Get response answer.
 */
function pgh_form_get_response_answer($qid, $app_id) {
  // If response doesn't exist.
  $response_tag = pgh_form_get_data($qid, 'mapping');
  if (!$response_tag) {
    // Create new response.
    $rid = pgh_api_set_response($app_id, $question_wrapper->getIdentifier());
    // Put it into cache.
    $response = node_load($rid);
    $response_tag = $response->title;
    pgh_form_set_data($response_tag, 'response', $response, TRUE);
    pgh_form_set_data($qid, 'mapping', $response_tag);
  }

  $answer = array(
    'id' => 0,
    'value' => '',
    'point' => 0,
    'score' => 0,
    'kpi' => 0,
    'updated' => 0,
  );

  if ($response_wrapper = pgh_form_get_data($response_tag, 'response_wrapper')) {
    $kpi = $response_wrapper->field_response_kpi->value();
    $rid = $response_wrapper->getIdentifier();
    $answer = array(
      'id' => $rid,
      'value' => $response_wrapper->body->value() ? $response_wrapper->body->value->raw() : '',
      'point' => $response_wrapper->field_response_point->value(),
      'score' => $response_wrapper->field_response_score->value(),
      'kpi' => ($kpi === NULL) ? '~' : $kpi,
      'updated' => $response_wrapper->field_response_updated->value(),
    );
  }

  return $answer;
}
