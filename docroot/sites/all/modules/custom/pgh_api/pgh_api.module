<?php

/**
 * @file
 * Awards API module. Provides functions for getting information about objects in the awards system.
 *
 * @author Jay Roberts <jay@designhammer.com>
 */

/**
 * Returns an array of Work Group nodes for the current user.
 *
 * @return array
 *   An array of Work Group nodes owned by the current user or an empty array if none found.
 *
 * @author Jay Roberts <jay@designhammer.com>
 */
function pgh_api_work_groups_for_user() {
  global $user;

  $nids = array();

  // Find Work Groups that the user is an administrator of.
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
                  ->propertyCondition('type', 'work_group')
                  ->fieldCondition('field_administrators', 'target_id', $user->uid)
                  ->execute();

  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
  }

  // Find Work Groups where the user is a Business Unit User.
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
                ->propertyCondition('type', 'business_unit')
                ->fieldCondition('field_users', 'target_id', $user->uid)
                ->execute();

  if (isset($result['node'])) {
    $business_unit_nids = array_keys($result['node']);
    foreach ($business_unit_nids as $business_unit_nid) {
      $work_group = pgh_api_work_group_for_business_unit($business_unit_nid);
      if ($work_group) {
        $nids[] = $work_group->nid;
      }
    }
  }

  // Load all of the nids as full nodes.
  $nids = array_unique($nids);

  $work_groups = array();
  foreach ($nids as $nid) {
    $work_groups[] = node_load($nid);
  }

  return $work_groups;
}


/**
 * Returns the Work Group node which owns the specified Business Unit node.
 *
 * @param int $business_unit_nid
 *   This nid of the Business Unit to find a Work Group for.
 *
 * @return object
 *   A fully loaded Work Group node which is the owner of the specified Business Unit, or FALSE if not found.
 */
function pgh_api_work_group_for_business_unit($business_unit_nid) {
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
                  ->propertyCondition('type', 'work_group')
                  ->fieldCondition('field_business_units', 'target_id', $business_unit_nid)
                  ->execute();

  if (isset($result['node'])) {
    $nids = array_keys($result['node']);
    return node_load($nids[0]);
  }

  return FALSE;
}

/**
 * Returns nid(s) based on a supplied pgh item key id.
 *
 * @param string $key
 *   A category key.
 *
 * @param string $type
 *   Type of the item
 *
 * @param boolean $all
 *   If all matching nid are returned, or just the first one, default FALSE
 *
 * @return int
 *   The nid for the supplied id or 0 if not found.
 *   Or array of nids if $all = TRUE
 *
 * @author Fang Jin <fang@designhammer.com>
 */
function pgh_api_find_nid($key, $type, $all = FALSE) {
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
                  ->propertyCondition('type', $type)
                  ->propertyCondition('title', $key)
                  ->execute();
  if (!empty($result['node'])) {
    $keys = array_keys($result['node']);
    if ($all) {
      return $keys;
    } else {
      return $keys[0];
    }
  }
  else {
    return 0;
  }
}

/**
 * Validate question based on validation rules and value
 *
 * @param array $validations
 *   Validation rules string delimited by comma
 *
 * @param array $value
 *   Value needs to be validated
 *
 * @return array
 *   Array of string of error messages
 *
 * @author Fang Jin <fang@designhammer.com>
 */
function pgh_api_validate_question_value($validations, $value) {
  $errors = array();
  $validates = explode(',', $validations);
  foreach ($validates as $validate) {
    switch (trim($validate)) {
      case 'nonnegative':
        if (!is_numeric($value)) {
          $errors[] = 'The item value needs to be number';
        }
        else {
          if ($value < 0) {
            $errors[] = 'The item value neds to be positive';
          }
        }
        break;

      case 'integer':
        // Check if $value is an integer or string representation of an integer.
        // is_int() will fail on the string values presented by the Form API.
        $is_int = ((string) (int) $value) == $value;
        if (!$is_int) {
          $errors[] = 'The item value needs to be integer';
        }
        break;

      case 'nonzero':
        if (!is_numeric($value)) {
          $errors[] = 'The item value needs to be number';
        }
        else {
          if ($value == 0) {
            $errors[] = 'The item value can not be zero';
          }
        }
        break;

      case 'percentage':
        $is_int = ((string) (int) $value) == $value;
        if (!$is_int || $value < 0 || $value > 100) {
          $errors[] ='The item value needs to be integer in the range 0 - 100';
        }
        break;

      default:
        $errors[] = 'Unsupported validation rule: ' . $validate;
        break;
    }
  }

  return $errors;
}
