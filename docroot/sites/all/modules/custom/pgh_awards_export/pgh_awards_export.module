<?php

/**
 * @file
 * Export module.
 *
 * @author Fang Jin <fang@designhammer.com>
 */

/**
 * Implements hook_menu().
 */
function pgh_awards_export_menu() {
  $items = array();

  // Calculate category score for one application.
  $items['admin/export/data'] = array(
    'title' => 'Export applications',
    'description' => 'Export application forms value and questions',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pgh_awards_export_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Export form.
 *
 * @author Fang Jin <fang@designhammer.com>
 */
function pgh_awards_export_form($form, &$form_state, $apptype_tag = NULL) {
  $form['description'] = array(
    '#markup' => 'This will take a few minutes to export all applications of this application type, proceed ? <br />',
  );
  $atids = pgh_api_find_nodes(
    array(
      'type' => 'apptype',
    ),
    NULL, TRUE
  );
  $apptypes = node_load_multiple($atids);
  $options = array();
  foreach ($apptypes as &$apptype) {
    $options[$apptype->title] = $apptype->body['und'][0]['value'];
  }
  $form['apptype'] = array(
    '#type' => 'select',
    '#title' => 'Choose application type',
    '#options' => $options,
    '#default_value' => $apptype_tag,
  );

  $form['all'] = array(
    '#type' => 'checkbox',
    '#title' => 'Process all',
    '#description' => 'Check this if you are sure you want to export all the applications',
    '#default_value' => 0,
  );
  $form['debug'] = array(
    '#type' => 'textfield',
    '#title' => '[Debug] Set how many applications to process',
    '#default_value' => 1,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Export',
  );

  return $form;
}

/**
 * Submit handler for export.
 *
 * @author Fang Jin <fang@designhammer.com>
 */
function pgh_awards_export_form_submit($form, &$form_state) {
  $values = &$form_state['values'];
  $apptype_tag = $values['apptype'];

  // Find out all applications of this application type.
  $app_ids = pgh_api_find_nodes(
    array(
      'type' => 'application',
      'field_application_type' => $apptype_tag,
    ),
    NULL, TRUE
  );

  $operations = array();
  $debug = 0;
  if (empty($values['all'])) {
    if (isset($values['debug'])) {
      $debug = intval($values['debug']);
    }
  }
  // Setup op for headers.
  $operations[] = array('pgh_awards_export_op', array($apptype_tag, 0));
  $i = 0;
  foreach ($app_ids as $nid) {
    $operations[] = array('pgh_awards_export_op', array($apptype_tag, $nid));
    if ($debug) {
      $i += 1;
      if ($i >= $debug) {
        break;
      }
    }
  }
  $batch = array(
    'operations' => $operations,
    'finished' => 'pgh_awards_export_form_finished',
  );
  batch_set($batch);
}

/**
 * Finish handler for export.
 */
function pgh_awards_export_form_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('@count applications exported.', array('@count' => count($results))));
  }
  else {
    // An error occurred.
    $error_operation = reset($operations);
    drupal_set_message(t('An error occurred while processing id: @args',
      array('@args' => print_r($error_operation[0], TRUE))));
  }
}

/**
 * Op handler for export.
 *
 * Pass in $op_id, which is app_id for positive, and header row for non-positive value.
 * 
 * @author Fang Jin <fang@designhammer.com>
 */
function pgh_awards_export_op($apptype_tag, $op_id, &$context) {
  if ($op_id <= 0) {
    // Init the whole process.
    if (!isset($context['results']['uri'])) {
      if ($uri = pgh_awards_export_createfile()) {
        $context['results']['uri'] = $uri;
        $context['results']['questions'] = pgh_awards_export_questions($apptype_tag);
      }
    }
  }

  // Calculate the op.
  $row = pgh_awards_export_application_row($op_id, $context['results']['questions']);dsm($row);
  // Write the result.
  pgh_awards_export_writefile($context['results']['uri'], $row);

  $context['message'] = t('Calculating application "@nid"', array('@nid' => $op_id));
}

/**
 * Create export file in db.
 *
 * @author Fang Jin <fang@designhammer.com>
 */
function pgh_awards_export_createfile() {
  // Create a file with unique name prefixed with pgh.
  $path = 'pgh_' . substr(md5(rand()), 0, 7) . '.csv';

  // Save the file into the DB.
  $file = file_save_data('', 'temporary://' . $path, FILE_EXISTS_REPLACE);

  return $file->uri;
}

/**
 * Write to the output file.
 *
 * @author Fang Jin <fang@designhammer.com>
 */
function pgh_awards_export_writefile($uri, $string) {
  if (file_put_contents($uri, $string, FILE_APPEND | LOCK_EX) === FALSE) {
    $this->abort_export(t('Could not write to temporary output file for result export (@file). Check permissions.', array('@file' => $uri)));
  }
}

/**
 * Get the header of the application.
 * 
 * Generate CSV header and row information.
 *
 * @param int $op_id
 *   Application ID or Header ID.
 * @param array $questions
 *   Questions arrange of specific application type.
 *
 * @author Fang Jin <fang@designhammer.com>
 */
function pgh_awards_export_application_row($op_id, &$questions) {
  // Header row $op id is negative value.
  if ($op_id <= 0) {
    $header = array(
      // Application Info.
      'application' => array(
        'id' => 'Application ID',
        'type' => 'Application Type',
        'status' => 'Application Status',
      ),
      'business_unit' => array(
        'id' => 'Business Unit ID',
        'title' => 'Business Unit Title',
        'institution' => 'Name of Institution',
      ),
    );

    $prompts = array();
    foreach ($questions as $key => &$question) {
      $prompts[$key] = $question['title'] . ":" . substr($question['prompt'], 0, 20);
      if (isset($question['row'])) {
        $prompts[$key] .= ' (R) ' . $question['row'];
      }
      if (isset($question['col'])) {
        $prompts[$key] .= ' (C) ' .  $question['col'];
      }
    }

    $row = array_merge(
      array_values($header['application']),
      array_values($header['business_unit']),
      array_values($prompts)
    );
  }
  // Whereas row $op id is positive value.
  else {
    $app_id = $op_id;
    $row = array();
    // Read application.
    if ($app = node_load($app_id)) {
      $app_wrapper = entity_metadata_wrapper('node', $app);
      $app_info = array(
        'id' => $app_id,
        'type' => $app_wrapper->field_application_type->value(),
        'status' => $app_wrapper->field_application_status->value(),
      );

      // Find Business Unit.
      $bunit_info = array(
        'id' => 0,
        'title' => 'N/A',
        'institution' => 'N/A'
      );
      $buid = pgh_api_find_nodes(array(
        'type' => 'business_unit',
        'field_applications' => array('target_id', $app_id, '='),
      ));
      if ($bunit = node_load($buid)) {
        $bunit_wrapper = entity_metadata_wrapper('node', $bunit);

        $bunit_info = array(
          'id' => $buid,
          'title' => $bunit_wrapper->title->value(),
          'institution' => $bunit_wrapper->field_business_unit_name->value(),
        );
      }

      // Populate all questions.
      $qids = array();
      foreach ($questions as $key => &$question) {
        $qids[] = $question['id'];
      }

      // Find responses of all the questions.
      $rids = pgh_api_find_nodes(
        array(
          'type' => 'response',
          'field_response_question' => array('target_id', $qids, 'IN'),
          'field_response_application' => array('target_id', $app_id, '=')
        ),
        NULL, TRUE
      );
      $responses = node_load_multiple($rids);

      // Find out all responses.
      foreach ($responses as &$response) {
        $response_wrapper = entity_metadata_wrapper('node', $response);
        $qid = $response_wrapper->field_response_question->raw();
        $body = $response_wrapper->body->value();
        if (!empty($questions['question_' . $qid])) {
          $question = &$questions['question_' . $qid];

          $value = !empty($body) ? $body['value'] : '';
          switch ($question['type']) {
            case 'container':
              $value = 'CONTAINER';
              break;

            case 'file':
              if ($file = file_load($value)) {
                $value = file_create_url($file->uri);
              }
              break;

            case 'selection':
              switch ($question['style']) {
                case 'checkboxes':
                  $choices = unserialize($value);
                  $value = array();
                  foreach ($choices as $choice) {
                    if ($choice) {
                      $value[] = $choice;
                    }
                  }
                  $value = implode('|', $value);
                  break;

                case 'default':
                case 'dropdown':
                case 'radios':
                  if (isset($question['options'][$value])) {
                    $value = $question['options'][$value];
                  }
                  break;
              }
              break;

            default:
              break;
          }

          $question['value'] = $value;
        }
      }
      // dsm($questions);
      $answers = array();
      foreach ($questions as $key => &$question) {
        $answers[$key] = $question['value'];
      }

      $row = array_merge(
        array_values($app_info),
        array_values($bunit_info),
        array_values($answers)
      );
    }
  }

  // Convert row into a csv row.
  return '"' . implode('","', $row) . '"' . "\r\n";
}
/**
 * Get all questions for one application type.
 *
 * @author Fang Jin <fang@designhammer.com>
 */
function pgh_awards_export_questions($apptype_tag) {
  // Use drupal static to cache for same page load.
  // @codingStandardsIgnoreStart
  // $questions = &drupal_static(__FUNCTION__);
  // if (isset($questions)) {
  //   return $questions;
  // }
  // @codingStandardsIgnoreEnd
  $questions = array();
  if ($apptype_id = pgh_api_find_nodes(array('type' => 'apptype', 'title' => $apptype_tag))) {
    $app_type = node_load($apptype_id);
    $app_type_wrapper = entity_metadata_wrapper('node', $app_type);

    $i = 0;
    $questions = array();
    $types = array('html');
    foreach ($app_type_wrapper->field_apptype_categories->getIterator() as $cat_wrapper) {
      foreach ($cat_wrapper->field_category_sections->getIterator() as $section_wrapper) {
        foreach ($section_wrapper->field_section_questions->getIterator() as $question_wrapper) {
          $title = $question_wrapper->title->value();
          $type = $question_wrapper->field_question_type->value();
          if (in_array($type, $types)) {
            continue;
          }
          $questions['question_' . $question_wrapper->getIdentifier()] = array(
            'id' => $question_wrapper->getIdentifier(),
            'title' => $title,
            'type' => $type,
            'style' => $question_wrapper->field_question_style->value(),
            'prompt' => $question_wrapper->field_question_prompt->value(),
            'options' => $question_wrapper->field_question_options->value(),
            'layout' => $question_wrapper->field_question_layout->value(),
          );

          // @codingStandardsIgnoreStart
          $i += 1;
          if ($i > 100000) {
            // Handle layout field requires post process.
            foreach ($questions as &$question) {
              if ($question['type'] == 'container') {
                $layout = pgh_parse_layout($question['layout']);
                // Figure out if first col is not a header
                $col_skipped = !empty($layout[1][0]) ? (substr($layout[1][0], 0, 5) == 'pghq_') : FALSE;
                $row_skipped = !empty($layout[0][1]) ? (substr($layout[0][1], 0 ,5) == 'pghq_') : FALSE;
                $p = 0;
                foreach ($layout as &$row) {
                  $q = 0;
                  foreach ($row as $cell) {
                    if (substr($cell, 0, 5) == 'pghq_') {
                      if ($qid = pgh_find_question_id($cell)) {
                        $id = 'question_' . $qid;
                        if (!$col_skipped) {
                          $questions[$id]['row'] = $layout[$p][0];
                        }
                        if (!$row_skipped) {
                          $questions[$id]['col'] = $layout[0][$q];
                        }
                      }
                    }
                    $q += 1;
                  }
                  $p += 1;
                }
                // dsm($layout);
              }
            }

            return $questions;
          }
          // @codingStandardsIgnoreEnd
        }
      }
    }

  }
  return $questions;
}
