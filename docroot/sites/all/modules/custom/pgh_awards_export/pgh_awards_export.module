<?php

/**
 * @file
 * Export module.
 *
 * @author Fang Jin <fang@designhammer.com>
 */

/**
 * Implements hook_menu().
 */
function pgh_awards_export_menu() {
  $items = array();

  // Calculate category score for one application.
  $items['admin/export/data'] = array(
    'title' => 'Export applications',
    'description' => 'Export application forms value and questions',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pgh_awards_export_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Export form.
 *
 * @author Fang Jin <fang@designhammer.com>
 */
function pgh_awards_export_form($form, &$form_state, $apptype_tag = NULL) {
  $form['description'] = array(
    '#markup' => 'This will take a few minutes to export all applications of this application type, proceed ? <br />',
  );
  $atids = pgh_api_find_nodes(
    array(
      'type' => 'apptype',
    ),
    NULL, TRUE
  );
  $apptypes = node_load_multiple($atids);
  $options = array();
  foreach ($apptypes as &$apptype) {
    $options[$apptype->title] = $apptype->body['und'][0]['value'];
  }
  $form['apptype'] = array(
    '#type' => 'select',
    '#title' => 'Choose application type',
    '#options' => $options,
    '#default_value' => $apptype_tag,
  );

  $form['all'] = array(
    '#type' => 'checkbox',
    '#title' => 'Process all',
    '#description' => 'Check this if you are sure you want to export all the applications',
    '#default_value' => 0,
  );
  $form['debug'] = array(
    '#type' => 'textfield',
    '#title' => '[Debug] Set how many applications to process',
    '#default_value' => 1,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Export',
  );

  return $form;
}

/**
 * Submit handler for export.
 *
 * @author Fang Jin <fang@designhammer.com>
 */
function pgh_awards_export_form_submit($form, &$form_state) {
  $values = &$form_state['values'];
  $apptype_tag = $values['apptype'];

  // Create file and fill the header.
  if ($uri = pgh_awards_export_createfile()) {
    $header = pgh_awards_export_application_header();
    pgh_awards_export_writefile($uri, $header);
    dsm($uri);
  }

  // Find out all applications of this application type.
  $app_ids = pgh_api_find_nodes(
    array(
      'type' => 'application',
      'field_application_type' => $apptype_tag,
    ),
    NULL, TRUE
  );

  $operations = array();
  $debug = 0;
  if (empty($values['all'])) {
    if (isset($values['debug'])) {
      $debug = intval($values['debug']);
    }
  }
  $i = 0;
  foreach ($app_ids as $nid) {
    $operations[] = array('pgh_awards_export_op', array($nid, $uri));
    if ($debug) {
      $i += 1;
      if ($i >= $debug) {
        break;
      }
    }
  }
  $batch = array(
    'operations' => $operations,
    'finished' => 'pgh_awards_export_form_finished',
  );
  batch_set($batch);
}

/**
 * Finish handler for export.
 */
function pgh_awards_export_form_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('@count applications exported.', array('@count' => count($results))));
  }
  else {
    // An error occurred.
    $error_operation = reset($operations);
    drupal_set_message(t('An error occurred while processing id: @args',
      array('@args' => print_r($error_operation[0], TRUE))));
  }
}

/**
 * Op handler for export.
 */
function pgh_awards_export_op($app_id, $uri, &$context) {
  $row = pgh_awards_export_application_row($app_id);dsm($row);
  pgh_awards_export_writefile($uri, $row);

  $context['results'][] = $app_id;
  $context['message'] = t('Calculating application "@nid"', array('@nid' => $app_id));
}

/**
 * Create export file in db.
 *
 * @author Fang Jin <fang@designhammer.com>
 */
function pgh_awards_export_createfile() {
  // Create a file with unique name prefixed with pgh.
  $path = 'pgh_' . substr(md5(rand()), 0, 7) . '.csv';

  // Save the file into the DB.
  $file = file_save_data('', 'temporary://' . $path, FILE_EXISTS_REPLACE);

  return $file->uri;
}

/**
 * Write to the output file.
 *
 * @author Fang Jin <fang@designhammer.com>
 */
function pgh_awards_export_writefile($uri, $string) {
  if (file_put_contents($uri, $string, FILE_APPEND) === FALSE) {
    $this->abort_export(t('Could not write to temporary output file for result export (@file). Check permissions.', array('@file' => $uri)));
  }
}

/**
 * Get the header of the application.
 *
 * @author Fang Jin <fang@designhammer.com>
 */
function pgh_awards_export_application_header() {
  $row = array(
    // Application Info.
    'application' => array(
      'id' => 'Application ID',
      'type' => 'Application Type',
      'status' => 'Application Status',
    ),
    'business_unit' => array(
      'id' => 'Business Unit ID',
      'title' => 'Business Unit Title',
      'institution' => 'Name of Institution',
    ),
  );

  $header = array_merge(
    array_values($row['application']),
    array_values($row['business_unit'])
  );

  return implode(',', $header) . "\r\n";
}

/**
 * Create csv row for each application.
 *
 * @author Fang Jin <fang@designhammer.com>
 */
function pgh_awards_export_application_row($app_id) {
  $row = array();
  // Read application.
  if ($app = node_load($app_id)) {
    $app_wrapper = entity_metadata_wrapper('node', $app);
    $app_info = array(
      'id' => $app_id,
      'type' => $app_wrapper->field_application_type->value(),
      'status' => $app_wrapper->field_application_status->value(),
    );

    // Find Business Unit.
    $bunit_info = array();
    $buid = pgh_api_find_nodes(array(
      'type' => 'business_unit',
      'field_applications' => array('target_id', $app_id, '='),
    ));
    if ($bunit = node_load($buid)) {
      $bunit_wrapper = entity_metadata_wrapper('node', $bunit);

      $bunit_info = array(
        'id' => $buid,
        'title' => $bunit_wrapper->title->value(),
        'institution' => $bunit_wrapper->field_business_unit_name->value(),
      );
    }
    $row = array_merge(
      array_values($app_info),
      array_values($bunit_info)
    );
  }

  // Convert row into a csv row.
  return implode(',', $row) . "\r\n";
}
